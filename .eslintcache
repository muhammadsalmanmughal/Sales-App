[{"E:\\salman\\Sales-App\\src\\index.js":"1","E:\\salman\\Sales-App\\src\\reportWebVitals.js":"2","E:\\salman\\Sales-App\\src\\App.js":"3","E:\\salman\\Sales-App\\src\\config\\Route\\index.js":"4","E:\\salman\\Sales-App\\src\\context\\Random\\random.js":"5","E:\\salman\\Sales-App\\src\\components\\Layout\\layout.js":"6","E:\\salman\\Sales-App\\src\\components\\Signup\\signup.js":"7","E:\\salman\\Sales-App\\src\\components\\Login\\Login.js":"8","E:\\salman\\Sales-App\\src\\context\\UserContext\\UserContext.js":"9","E:\\salman\\Sales-App\\src\\Utils\\utils.js":"10","E:\\salman\\Sales-App\\src\\components\\Signup\\style\\index.js":"11","E:\\salman\\Sales-App\\src\\components\\Login\\style\\index.js":"12","E:\\salman\\Sales-App\\src\\components\\NavigationLinks\\navLinks.js":"13","E:\\salman\\Sales-App\\src\\config\\Firebase\\firebase.js":"14","E:\\salman\\Sales-App\\src\\components\\Sidebar\\sidebar.js":"15","E:\\salman\\Sales-App\\src\\components\\MediaQuery\\media.js":"16","E:\\salman\\Sales-App\\src\\components\\Cutomer\\updateCustomer.js":"17","E:\\salman\\Sales-App\\src\\components\\RequestForQuotation\\requestForQuotation.js":"18","E:\\salman\\Sales-App\\src\\components\\UserProfile\\userProfile.js":"19","E:\\salman\\Sales-App\\src\\components\\PurchaseOrder\\purchaseOrder.js":"20","E:\\salman\\Sales-App\\src\\components\\Dashboard\\dashboard.js":"21","E:\\salman\\Sales-App\\src\\components\\CustomerOrder\\customerOrder.js":"22","E:\\salman\\Sales-App\\src\\components\\PurchaseOrder\\purchaseOrderDetails.js":"23","E:\\salman\\Sales-App\\src\\components\\Details\\customerDetails.js":"24","E:\\salman\\Sales-App\\src\\components\\Cutomer\\cutomer.js":"25","E:\\salman\\Sales-App\\src\\components\\Details\\vendorDetails.js":"26","E:\\salman\\Sales-App\\src\\components\\Header\\header.js":"27","E:\\salman\\Sales-App\\src\\components\\Inventory\\inventory.js":"28","E:\\salman\\Sales-App\\src\\components\\Vendor\\index.js":"29","E:\\salman\\Sales-App\\src\\Utils\\skeleton.js":"30","E:\\salman\\Sales-App\\src\\components\\Details\\styles\\index.js":"31","E:\\salman\\Sales-App\\src\\components\\RequestForQuotation\\style\\index.js":"32","E:\\salman\\Sales-App\\src\\components\\Vendor\\style\\index.js":"33","E:\\salman\\Sales-App\\src\\components\\Vendor\\schema.js":"34","E:\\salman\\Sales-App\\src\\components\\AllVendors\\allVendors.js":"35","E:\\salman\\Sales-App\\src\\components\\FormError\\formError.js":"36","E:\\salman\\Sales-App\\src\\components\\Textbox\\style\\index.js":"37","E:\\salman\\Sales-App\\src\\components\\FormError\\style\\index.js":"38","E:\\salman\\Sales-App\\src\\components\\Cutomer\\validationSchema.js":"39","E:\\salman\\Sales-App\\src\\components\\AllVendors\\style\\index.js":"40","E:\\salman\\Sales-App\\src\\components\\Header\\style\\index.js":"41","E:\\salman\\Sales-App\\src\\components\\AllCustomers\\allCustomers.js":"42","E:\\salman\\Sales-App\\src\\components\\UserProfile\\style\\index.js":"43","E:\\salman\\Sales-App\\src\\config\\Route\\routes.js":"44","E:\\salman\\Sales-App\\src\\components\\AllCustomers\\style\\index.js":"45"},{"size":517,"mtime":1614839078761,"results":"46","hashOfConfig":"47"},{"size":375,"mtime":1614839078761,"results":"48","hashOfConfig":"47"},{"size":877,"mtime":1617690484837,"results":"49","hashOfConfig":"47"},{"size":658,"mtime":1617690484893,"results":"50","hashOfConfig":"47"},{"size":616,"mtime":1617690484893,"results":"51","hashOfConfig":"47"},{"size":3031,"mtime":1619212816211,"results":"52","hashOfConfig":"47"},{"size":3208,"mtime":1614839078746,"results":"53","hashOfConfig":"47"},{"size":2538,"mtime":1616761010348,"results":"54","hashOfConfig":"47"},{"size":411,"mtime":1616761010348,"results":"55","hashOfConfig":"47"},{"size":15118,"mtime":1620113712277,"results":"56","hashOfConfig":"47"},{"size":2673,"mtime":1614839078746,"results":"57","hashOfConfig":"47"},{"size":2588,"mtime":1614839078730,"results":"58","hashOfConfig":"47"},{"size":1017,"mtime":1619212816211,"results":"59","hashOfConfig":"47"},{"size":460,"mtime":1614839078746,"results":"60","hashOfConfig":"47"},{"size":1155,"mtime":1617690484885,"results":"61","hashOfConfig":"47"},{"size":512,"mtime":1614839078730,"results":"62","hashOfConfig":"47"},{"size":205,"mtime":1614839078699,"results":"63","hashOfConfig":"47"},{"size":4287,"mtime":1615879663704,"results":"64","hashOfConfig":"47"},{"size":453,"mtime":1614839078746,"results":"65","hashOfConfig":"47"},{"size":16232,"mtime":1620114403664,"results":"66","hashOfConfig":"47"},{"size":225,"mtime":1617690484845,"results":"67","hashOfConfig":"47"},{"size":4781,"mtime":1615792066553,"results":"68","hashOfConfig":"47"},{"size":10658,"mtime":1620114360313,"results":"69","hashOfConfig":"47"},{"size":6988,"mtime":1615369259093,"results":"70","hashOfConfig":"47"},{"size":11416,"mtime":1616418990680,"results":"71","hashOfConfig":"47"},{"size":6055,"mtime":1615359000992,"results":"72","hashOfConfig":"47"},{"size":4671,"mtime":1617693475403,"results":"73","hashOfConfig":"47"},{"size":9249,"mtime":1619467700567,"results":"74","hashOfConfig":"47"},{"size":10806,"mtime":1615359001063,"results":"75","hashOfConfig":"47"},{"size":2639,"mtime":1619212816203,"results":"76","hashOfConfig":"47"},{"size":154,"mtime":1614840757754,"results":"77","hashOfConfig":"47"},{"size":800,"mtime":1615276006083,"results":"78","hashOfConfig":"47"},{"size":425,"mtime":1614839078746,"results":"79","hashOfConfig":"47"},{"size":829,"mtime":1614839078746,"results":"80","hashOfConfig":"47"},{"size":3915,"mtime":1617690484845,"results":"81","hashOfConfig":"47"},{"size":224,"mtime":1614839078730,"results":"82","hashOfConfig":"47"},{"size":222,"mtime":1614839078746,"results":"83","hashOfConfig":"47"},{"size":97,"mtime":1614839078730,"results":"84","hashOfConfig":"47"},{"size":1247,"mtime":1614839078699,"results":"85","hashOfConfig":"47"},{"size":730,"mtime":1614840552724,"results":"86","hashOfConfig":"47"},{"size":957,"mtime":1614839078730,"results":"87","hashOfConfig":"47"},{"size":4430,"mtime":1615364204105,"results":"88","hashOfConfig":"47"},{"size":174,"mtime":1614839078746,"results":"89","hashOfConfig":"47"},{"size":1381,"mtime":1617691149207,"results":"90","hashOfConfig":"47"},{"size":730,"mtime":1614839078699,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1gkmbzl",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"94"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"94"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"94"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"94"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"94"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"94"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"94"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"94"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"E:\\salman\\Sales-App\\src\\index.js",[],["198","199"],"E:\\salman\\Sales-App\\src\\reportWebVitals.js",[],"E:\\salman\\Sales-App\\src\\App.js",[],"E:\\salman\\Sales-App\\src\\config\\Route\\index.js",[],"E:\\salman\\Sales-App\\src\\context\\Random\\random.js",[],"E:\\salman\\Sales-App\\src\\components\\Layout\\layout.js",["200","201"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport {getAllVendors, getAllInventoryItems} from '../../Utils/utils'\r\nimport { Switch, Route, useHistory } from \"react-router-dom\";\r\nimport {\r\n    SideBar, Header,\r\n    Dashboard,\r\n    Vendor,\r\n    UserProfile,\r\n    Customer,\r\n    RequestForQuotation,\r\n    PurchaseOrder,\r\n    VendorDetails,\r\n    CustomerDetails,\r\n    CustomerOrder,\r\n    UpdateCustomer,\r\n    Inventory,\r\n    PurchaseOrderDetails\r\n} from '../NavigationLinks/navLinks'\r\nimport { VendorCustomerContext } from '../../context/Random/random'\r\nimport { UserProvider } from '../../context/UserContext/UserContext'\r\nimport './layout.css'\r\n\r\nfunction Layout() {\r\n    const { setVendors, setAllInventoryItems } = useContext(VendorCustomerContext)\r\n    useEffect(() => {\r\n        getAllVendors().then(data => {\r\n            console.log('all vendors data in layout', data)\r\n            setVendors(data)\r\n        })\r\n        \r\n        getAllInventoryItems().then(data => {\r\n            console.log('Inventory data in layout', data)\r\n            setAllInventoryItems(data)\r\n        })\r\n    }, [])\r\n\r\n    //#endregion\r\n\r\n    const history = useHistory()\r\n    const token = localStorage.getItem('Authorization')\r\n    if (!token) {\r\n        history.replace('/')\r\n        return null\r\n    }\r\n    return (\r\n        <div>\r\n            <UserProvider>\r\n                    <Header />\r\n                    <div className='main'>\r\n                        <div className='sidebar'>\r\n                            <SideBar />\r\n                        </div>\r\n                        <div className='content'>\r\n                            <Switch>\r\n                                <Route path=\"/home/dashboard\" component={Dashboard} />\r\n                                <Route path=\"/home/user-profile\" component={UserProfile} />\r\n                                <Route path=\"/home/vendor\" component={Vendor} />\r\n                                <Route path=\"/home/customer\" component={Customer} />\r\n                                <Route path=\"/home/request-for-quotation\" component={RequestForQuotation} />\r\n                                <Route path=\"/home/purchase-order\" component={PurchaseOrder} />\r\n                                <Route path=\"/home/purchase-order-details/:slug/\" component={PurchaseOrderDetails} />\r\n                                <Route path=\"/home/vendor-details/:slug/:Cname\" component={VendorDetails} />\r\n                                <Route path=\"/home/customer-details/:slug/:Cname\" component={CustomerDetails} />\r\n                                <Route path=\"/home/customer-order/:slug/:Cname\" component={CustomerOrder} />\r\n                                <Route path=\"/home/update-customer/:data\" component={UpdateCustomer} />\r\n                                <Route path=\"/home/inventory\" component={Inventory} />\r\n                            </Switch>\r\n                        </div>\r\n                    </div>\r\n            </UserProvider>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Layout","E:\\salman\\Sales-App\\src\\components\\Signup\\signup.js",[],"E:\\salman\\Sales-App\\src\\components\\Login\\Login.js",["202","203","204"],"import React, { useState, useContext } from 'react'\r\nimport { loginUser } from '../../Utils/utils';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport 'antd/dist/antd.css';\r\nimport { message } from 'antd';\r\n\r\nimport {\r\n    LoginContainer,\r\n    LoginDiv,\r\n    LoginHeading,\r\n    LoginForm,\r\n    UserEmailTextbox,\r\n    PasswordTextbox,\r\n    PrimaryButton,\r\n    TextWelcome,\r\n    Paragraph,\r\n    BreakLine,\r\n    Link\r\n} from './style/index'\r\n\r\nexport default function Login() {\r\n    const history = useHistory();\r\n    const [email, setUserEmail] = useState();\r\n    const [password, setPassword] = useState();\r\n    const [errorMessage, setErrorMessage] = useState(false)\r\n\r\n    if (localStorage.getItem('Authorization')) {\r\n        history.replace('/home')\r\n        // return\r\n    }\r\n    const onLogin = () => {\r\n        if (!email || !password) {\r\n            message.error('Enter valid credentials')\r\n        } else {\r\n            loginUser(email, password)\r\n                .then((res) => {\r\n                    // let token = res.auth.\r\n                    let token = 'dummy_token'\r\n                    localStorage.setItem('Authorization', token)\r\n                    history.replace('/home')\r\n                });\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <LoginContainer>\r\n                <LoginDiv>\r\n                    <TextWelcome>\r\n                        Welcome\r\n                    </TextWelcome>\r\n                    <LoginHeading>\r\n                        Login to Sales-App\r\n                    </LoginHeading>\r\n                    <LoginForm>\r\n                        <UserEmailTextbox\r\n                            type='text'\r\n                            placeholder='Email'\r\n                            onChange={e => setUserEmail(e.target.value)}\r\n                        />\r\n                        <PasswordTextbox\r\n                            type='password'\r\n                            placeholder='Password'\r\n                            onChange={e => setPassword(e.target.value)}\r\n                        />\r\n                        <PrimaryButton onClick={onLogin}>Continue</PrimaryButton>\r\n                    </LoginForm>\r\n                    <BreakLine />\r\n                    <Paragraph>\r\n                        Don't have an account?\r\n                   <Link onClick={() => history.push(\"/signup\")}>\r\n                            SignUp\r\n                   </Link>\r\n                    </Paragraph>\r\n                </LoginDiv>\r\n            </LoginContainer>\r\n        </div>\r\n    )\r\n}","E:\\salman\\Sales-App\\src\\context\\UserContext\\UserContext.js",[],"E:\\salman\\Sales-App\\src\\Utils\\utils.js",["205","206","207"],"E:\\salman\\Sales-App\\src\\components\\Signup\\style\\index.js",[],"E:\\salman\\Sales-App\\src\\components\\Login\\style\\index.js",[],"E:\\salman\\Sales-App\\src\\components\\NavigationLinks\\navLinks.js",[],"E:\\salman\\Sales-App\\src\\config\\Firebase\\firebase.js",[],"E:\\salman\\Sales-App\\src\\components\\Sidebar\\sidebar.js",[],"E:\\salman\\Sales-App\\src\\components\\MediaQuery\\media.js",[],"E:\\salman\\Sales-App\\src\\components\\Cutomer\\updateCustomer.js",["208","209"],"import React,{useState, useEffect} from 'react'\r\n\r\nconst UpdateCustomer = () => {\r\n    return(\r\n        <div>\r\n            <h2> update Customer</h2>\r\n        </div>\r\n    )\r\n}\r\nexport default UpdateCustomer","E:\\salman\\Sales-App\\src\\components\\RequestForQuotation\\requestForQuotation.js",["210","211","212"],"import React, { useState, useContext } from 'react'\r\nimport { Label } from '../Textbox/style/index'\r\nimport { VendorCustomerContext } from '../../context/Random/random'\r\nimport { CreateRFQ } from '../../Utils/utils'\r\nimport {\r\n  ListItem,\r\n  ItemDiv,\r\n  QuantityAndButtonDiv,\r\n  Quantity,\r\n  DeleteButton\r\n} from './style/index'\r\nimport {\r\n  Divider,\r\n  message,\r\n  Row,\r\n  Col,\r\n  Input,\r\n  Button,\r\n  Radio,\r\n  Select\r\n} from 'antd'\r\n\r\nconst RequestForQuatation = () => {\r\n  const [items, setItems] = useState()\r\n  const [quantity, setQuantity] = useState()\r\n  const [itemsList, setItemsList] = useState([])\r\n  const [radioValue, setRadioValue] = useState('A-class');\r\n  // const { vendors } = useContext(VendorCustomerContext)\r\n\r\n  const shortid = require('shortid')\r\n  const RFQiD = shortid.generate()\r\n\r\n  const selectQuality = e => {\r\n    setRadioValue(e.target.value);\r\n  };\r\nconsole.log('items',items);\r\nconsole.log('quantity',quantity);\r\n\r\nconst utc = new Date().toJSON().slice(0, 10).replace(/-/g, '/');\r\n\r\n  const CreateList = () => {\r\n    if (items == null) {\r\n      message.error('Items can not left Empty')\r\n    }\r\n    else if (isNaN(quantity) || quantity.length > 2) {\r\n      message.error('Quantity amount not support')\r\n    }\r\n\r\n    else {\r\n      setItemsList([...itemsList, { items, quantity, radioValue }])\r\n      setItems('')\r\n      setQuantity('')\r\n    }\r\n  }\r\n  const deleteItem = (id) => {\r\n    const newList = [...itemsList]\r\n    newList.splice(id, 1)\r\n    setItemsList(newList);\r\n  }\r\n\r\n  const generateRFQ = () => {\r\n      CreateRFQ(itemsList, RFQiD, utc)\r\n      setItemsList([])\r\n  }\r\n  console.log('itemList', itemsList);\r\n  return (\r\n    <div>\r\n      <h1>Request For Quotation</h1>\r\n      <Divider />\r\n      <Row gutter={[10, 10]}>\r\n        <Col xs={24} sm={8}>\r\n          <h4>\r\n            RFQ-ID:{RFQiD}\r\n          </h4>\r\n        </Col>\r\n        <Col xs={24} sm={12}>\r\n          <h4>Date: {utc}</h4>\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={[10, 10]}>\r\n        \r\n        <Col xs={24} sm={12}>\r\n          {/* <h4>RFQ-ID: <Id /></h4> */}\r\n        </Col>\r\n      </Row>\r\n      <Row gutter={[10, 10]}>\r\n        <Col xs={24} sm={24}>\r\n          <Label> Compnay Address:\r\n            <Input\r\n              type='text'\r\n              disabled\r\n            />\r\n          </Label>\r\n        </Col>\r\n      </Row>\r\n      <Divider>Add Items with quantity</Divider>\r\n      <Row gutter={[10, 10]}>\r\n        <Col xs={24} sm={8}>\r\n          <Input\r\n            type='text'\r\n            placeholder='Enter item name'\r\n            value={items}\r\n            onChange={e => setItems(e.target.value)}\r\n            maxLength={20}\r\n          />\r\n        </Col>\r\n        <Col xs={24} sm={4}>\r\n          <Input\r\n            type='number'\r\n            placeholder='Enter number of Quantity'\r\n            value={quantity}\r\n            onChange={e => setQuantity(e.target.value)}\r\n            maxLength={2}\r\n          />\r\n        </Col>\r\n        <Col xs={24} sm={6}>\r\n          <Radio.Group onChange={selectQuality} value={radioValue}>\r\n            <Radio value={'A-class'}>A</Radio>\r\n            <Radio value={'B-class'}>B</Radio>\r\n            <Radio value={'C-class'}>C</Radio>\r\n          </Radio.Group>\r\n        </Col>\r\n        <Col xs={24} sm={4}>\r\n\r\n          <Button onClick={CreateList}>Add</Button>\r\n        </Col>\r\n\r\n      </Row>\r\n\r\n      <ul>\r\n        {\r\n          itemsList.map((item, key) => {\r\n            return (\r\n              <>\r\n                <ListItem key={key} xs={24} sm={12}>\r\n                  <ItemDiv>\r\n                    {item.items}\r\n                  </ItemDiv>\r\n                  <QuantityAndButtonDiv>\r\n                    <Quantity>\r\n                      {item.quantity}/\r\n                      {item.radioValue}\r\n                    </Quantity>\r\n                    <DeleteButton>\r\n                      <Button danger onClick={() => deleteItem(key)}>Delete</Button>\r\n                    </DeleteButton>\r\n                  </QuantityAndButtonDiv>\r\n\r\n                </ListItem>\r\n              </>\r\n            )\r\n          })\r\n        }\r\n      </ul>\r\n      <Row>\r\n        <Col xs={24} sm={12}>\r\n          <Button onClick={generateRFQ}>Create RFQ</Button>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\nexport default RequestForQuatation","E:\\salman\\Sales-App\\src\\components\\UserProfile\\userProfile.js",[],"E:\\salman\\Sales-App\\src\\components\\PurchaseOrder\\purchaseOrder.js",["213","214"],"E:\\salman\\Sales-App\\src\\components\\Dashboard\\dashboard.js",["215"],"import React,{useContext} from 'react'\r\n\r\nimport './Styled/index.css'\r\nconst Dashboard = () => {\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h1>Dashboard</h1>\r\n          \r\n        </div>\r\n    )\r\n}\r\nexport default Dashboard","E:\\salman\\Sales-App\\src\\components\\CustomerOrder\\customerOrder.js",["216"],"import React, { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { getSpecificData } from '../../Utils/utils'\r\nimport { CaretLeftOutlined } from \"@ant-design/icons\";\r\nimport { Goback } from '../Details/styles/index'\r\nimport {\r\n    Divider,\r\n    Row,\r\n    Col,\r\n    Input,\r\n    Button\r\n} from 'antd';\r\nconst CustomerOrder = () => {\r\n    const [detailsdData, setDetailsData] = useState(\r\n        {\r\n            billToAddress: \"\",\r\n            businessName: \"\",\r\n            city: \"\",\r\n            compId: \"\",\r\n            email: \"\",\r\n            state: '',\r\n            iD: \"\",\r\n            phone: '',\r\n            postalCode: '',\r\n            responsibleName: \"\",\r\n            responsiblePhone: \"\",\r\n            secondaryPhone: \"\"\r\n        }\r\n    )\r\n    const [orderDetails, setOrderDetails] = useState()\r\n    const { slug, Cname } = useParams()\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        getSpecificData(slug, Cname).then(data => {\r\n            setDetailsData(data[0])\r\n        })\r\n    }, [])\r\n    const utc = new Date().toJSON().slice(0, 10).replace(/-/g, '/');\r\n\r\n    const CreateCustomerOrder = () => {\r\n        console.log(detailsdData && detailsdData, orderDetails)\r\n        setOrderDetails('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Goback onClick={e => history.goBack()}>\r\n                <CaretLeftOutlined /> GoBack\r\n            </Goback>\r\n            <Row gutter={[10, 10]}>\r\n                <Col xs={24} sm={12}>\r\n                    <h2>\r\n                        Customer Order\r\n            </h2>\r\n                </Col>\r\n                <Col xs={24} sm={12}>\r\n                    <h3>\r\n                        Date: {utc}\r\n                    </h3>\r\n                </Col>\r\n            </Row>\r\n            <Divider />\r\n            <Row gutter={[10, 10]}>\r\n                <Col xs={24} sm={8}>\r\n                    <h4>Name:</h4>\r\n                    {\r\n                        <Input type='text' value={detailsdData.businessName}\r\n                            disabled\r\n                        />\r\n                    }\r\n                </Col>\r\n                <Col xs={24} sm={8}>\r\n                    <h4>Company Name:</h4>\r\n                    {\r\n                        <Input type='text' value={detailsdData.companyName}\r\n                            disabled\r\n                        />\r\n                    }\r\n                </Col>\r\n                <Col xs={24} sm={8}>\r\n                    <h4>Phone:</h4>\r\n                    {\r\n                        <Input type='text' value={detailsdData.phone}\r\n                            disabled\r\n                        />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={[10, 10]}>\r\n                <Col xs={24} sm={24}>\r\n                    <h4>Address:</h4>\r\n                    {\r\n                        <Input type='text' value={detailsdData.billToAddress}\r\n                            disabled\r\n                        />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={[10, 10]}>\r\n                <Col xs={24} sm={8}>\r\n                    <h4>State</h4>\r\n                    {\r\n                        <Input type='text' value={detailsdData.state}\r\n                            disabled\r\n                        />\r\n                    }\r\n                </Col>\r\n                <Col xs={24} sm={8}>\r\n                    <h4>City</h4>\r\n                    {\r\n                        <Input type='text' value={detailsdData.city}\r\n                            disabled\r\n                        />\r\n                    }\r\n                </Col>\r\n                <Col xs={24} sm={8}>\r\n                    <h4>Postal Code</h4>\r\n                    {\r\n                        <Input type='text' value={detailsdData.postalCode}\r\n                            disabled\r\n                        />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={[10, 10]}>\r\n                <Col xs={24} sm={24}>\r\n                    <h4>Discription</h4>\r\n                    {\r\n                        <Input.TextArea\r\n                            value={orderDetails}\r\n                            rows={7}\r\n                            onChange={e => setOrderDetails(e.target.value)} />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n            <Row gutter={[10, 10]}>\r\n                <Col xs={24} sm={16}>\r\n                    <Button \r\n                    disabled={!orderDetails}\r\n                    onClick={CreateCustomerOrder}>\r\n                        CreateCustomerOrder\r\n    </Button>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\nexport default CustomerOrder","E:\\salman\\Sales-App\\src\\components\\PurchaseOrder\\purchaseOrderDetails.js",["217","218"],"E:\\salman\\Sales-App\\src\\components\\Details\\customerDetails.js",["219"],"import React, { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { getSpecificData, UpdateCustomer } from '../../Utils/utils'\r\nimport { CaretLeftOutlined } from \"@ant-design/icons\";\r\nimport { Goback } from './styles/index'\r\nimport {\r\n    Divider,\r\n    Row,\r\n    Col,\r\n    Input,\r\n    Button,\r\n    Switch\r\n} from 'antd';\r\nconst VendorDetails = () => {\r\n    const [detailsdData, setDetailsData] = useState(\r\n        {\r\n            billToAddress: \"\",\r\n            businessName: \"\",\r\n            city: \"\",\r\n            compId: \"\",\r\n            email: \"\",\r\n            state: '',\r\n            iD: \"\",\r\n            phone: '',\r\n            postalCode: '',\r\n            responsibleName: \"\",\r\n            responsiblePhone: \"\",\r\n            secondaryPhone: \"\"\r\n        }\r\n    )\r\n    const [isDisable, setisDisable] = useState(true)\r\n    const { slug, Cname } = useParams()\r\n    const history = useHistory();\r\n    useEffect(() => {\r\n        getSpecificData(slug, Cname).then(data => {\r\n            setDetailsData(data[0])\r\n        })\r\n        DisableFields(false)\r\n    }, [])\r\n\r\n    const changeHandler = (key, value) => {\r\n        setDetailsData({ ...detailsdData, [value]: key.target.value })\r\n    }\r\n\r\n    const updateCustomer = () => {\r\n        UpdateCustomer(detailsdData, detailsdData.compId)\r\n    }\r\n\r\n    function DisableFields(checked) {\r\n        console.log(`switch to ${checked}`);\r\n        setisDisable(checked)\r\n    }\r\n    // console.log('customerDetails------->', detailsdData, detailsdData.compId)\r\n    return (\r\n        <div>\r\n            <Goback onClick={e => history.goBack()}>\r\n                <CaretLeftOutlined /> GoBack\r\n            </Goback>\r\n            <h2>Customer Details page</h2>\r\n            <label> Update\r\n                <Switch\r\n                    size='small'\r\n                    onChange={DisableFields}\r\n                />\r\n            </label>\r\n            <div>\r\n                <Divider orientation=\"left\">\r\n                    <h2>Name</h2>\r\n                </Divider>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={16}>\r\n                        <h2>Name:</h2>\r\n                        {\r\n                            <Input type='text' value={detailsdData.businessName}\r\n                                onChange={(e) => changeHandler(e, 'businessName')}\r\n                                disabled={!isDisable}\r\n                            />\r\n                        }\r\n                    </Col>\r\n\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>Company:</h2>\r\n                        <Input type='text' value={detailsdData.companyName}\r\n                            onChange={(e) => changeHandler(e, 'companyName')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Divider orientation=\"left\">\r\n                    <h2>Address</h2>\r\n                </Divider>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={16}>\r\n                        <h2>State:</h2>\r\n                        <Input type='text' value={detailsdData.state}\r\n                            onChange={(e) => changeHandler(e, 'state')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>City:</h2>\r\n                        <Input type='text' value={detailsdData.city}\r\n                            onChange={(e) => changeHandler(e, 'city')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={16}>\r\n                        <h2>Address:</h2>\r\n                        <Input type='text' value={detailsdData.billToAddress}\r\n                            onChange={(e) => changeHandler(e, 'billToAddress')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>PostalCode:</h2>\r\n                        <Input type='text' value={detailsdData.postalCode}\r\n                            onChange={(e) => changeHandler(e, 'postalCode')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Divider orientation='left'>\r\n                    <h2>Contact</h2>\r\n                </Divider>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={16}>\r\n                        <h2>Email:</h2>\r\n                        <Input type='text' value={detailsdData.email}\r\n                            onChange={(e) => changeHandler(e, 'email')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>Phone Number:</h2>\r\n                        <Input type='text' value={detailsdData.phone}\r\n                            onChange={(e) => changeHandler(e, 'phone')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>Secondary Phone Number:</h2>\r\n                        <Input type='text' value={detailsdData.secondaryPhone}\r\n                            onChange={(e) => changeHandler(e, 'secondaryPhone')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Divider orientation='left'>\r\n                    <h2>Responsible Details</h2>\r\n                </Divider>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={16}>\r\n                        <h2>Name:</h2>\r\n                        <Input type='text' value={detailsdData.responsibleName}\r\n                            onChange={(e) => changeHandler(e, 'responsibleName')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>Phone Number:</h2>\r\n                        <Input type='text' value={detailsdData.responsiblePhone}\r\n                            onChange={(e) => changeHandler(e, 'responsiblePhone')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={16}>\r\n                        <Button onClick={updateCustomer}\r\n                            disabled={!isDisable}\r\n                        >Update</Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default VendorDetails","E:\\salman\\Sales-App\\src\\components\\Cutomer\\cutomer.js",[],"E:\\salman\\Sales-App\\src\\components\\Details\\vendorDetails.js",["220","221"],"import React, { useEffect, useState } from 'react'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\nimport { getSpecificData, UpdateVendor } from '../../Utils/utils'\r\nimport { CaretLeftOutlined } from \"@ant-design/icons\";\r\nimport { Goback, DetailsDiv } from './styles/index'\r\nimport {\r\n    Divider,\r\n    Row,\r\n    Col,\r\n    Input,\r\n    Button,\r\n    Switch\r\n} from 'antd';\r\nconst VendorDetails = () => {\r\n    const [isDisable, setisDisable] = useState(true)\r\n    const [detailsdData, setDetailsData] = useState(\r\n        {\r\n            ownerFirstName: \"\",\r\n            ownerLastName: '',\r\n            companyName: \"\",\r\n            city: \"\",\r\n            address: \"\",\r\n            email: \"\",\r\n            state: '',\r\n            iD: \"\",\r\n            phone: '',\r\n            postalCode: ''\r\n        }\r\n    )\r\n    const { slug, Cname } = useParams()\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getSpecificData(slug, Cname).then(data => {\r\n            setDetailsData(data[0])\r\n        })\r\n        DisableFields(false)\r\n    }, [])\r\n\r\n    function DisableFields(checked) {\r\n        console.log(`switch to ${checked}`);\r\n        setisDisable(checked)\r\n    }\r\n    const changeHandler = (key, value) => {\r\n        setDetailsData({ ...detailsdData, [value]: key.target.value })\r\n    }\r\n    const updateVendor = () => {\r\n        UpdateVendor(detailsdData, detailsdData.compId)\r\n    }\r\n    return (\r\n        <DetailsDiv>\r\n            <Goback onClick={e => history.goBack()}>\r\n                <CaretLeftOutlined /> GoBack\r\n            </Goback>\r\n            <h2>Vendor Details page</h2>\r\n            <label> Update\r\n                <Switch\r\n                    size='small'\r\n                    onChange={DisableFields}\r\n                />\r\n            </label>\r\n\r\n            <div>\r\n                <Divider orientation=\"left\">\r\n                    <h2>Name</h2>\r\n                </Divider>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>FirstName:</h2>\r\n                        {\r\n                            <Input type='text' value={detailsdData.ownerFirstName}\r\n                                onChange={(e) => changeHandler(e, 'ownerFirstName')}\r\n                                disabled={!isDisable}\r\n                            />\r\n                        }\r\n                    </Col>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>LastName:</h2>\r\n                        {\r\n                            <Input type='text' value={detailsdData.ownerLastName}\r\n                                onChange={(e) => changeHandler(e, 'ownerLastName')}\r\n                                disabled={!isDisable}\r\n                            />\r\n                        }\r\n                    </Col>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>Company:</h2>\r\n                        <Input type='text' value={detailsdData.companyName}\r\n                            onChange={(e) => changeHandler(e, 'companyName')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Divider orientation=\"left\">\r\n                    <h2>Address</h2>\r\n                </Divider>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={16}>\r\n                        <h2>State:</h2>\r\n                        <Input type='text' value={detailsdData.state}\r\n                            onChange={(e) => changeHandler(e, 'state')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>City:</h2>\r\n                        <Input type='text' value={detailsdData.city}\r\n                            onChange={(e) => changeHandler(e, 'city')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={16}>\r\n                        <h2>Address:</h2>\r\n                        <Input type='text' value={detailsdData.address}\r\n                            onChange={(e) => changeHandler(e, 'address')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>PostalCode:</h2>\r\n                        <Input type='text' value={detailsdData.postalCode}\r\n                            onChange={(e) => changeHandler(e, 'postalCode')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Divider orientation='left'>\r\n                    <h2>Contact</h2>\r\n                </Divider>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={16}>\r\n                        <h2>Email:</h2>\r\n                        <Input type='text' value={detailsdData.email}\r\n                            onChange={(e) => changeHandler(e, 'email')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={24} sm={8}>\r\n                        <h2>Phone Number:</h2>\r\n                        <Input type='text' value={detailsdData.phone}\r\n                            onChange={(e) => changeHandler(e, 'phone')}\r\n                            disabled={!isDisable}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row gutter={10, 10}>\r\n                    <Col xs={24} sm={16}>\r\n                        <Button \r\n                        onClick={updateVendor}\r\n                        disabled={!isDisable}\r\n                        >Update</Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n            {/* )\r\n            })} */}\r\n        </DetailsDiv>\r\n    )\r\n}\r\nexport default VendorDetails","E:\\salman\\Sales-App\\src\\components\\Header\\header.js",["222","223","224","225","226","227","228","229"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport firebase from '../../config/Firebase/firebase'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { message } from 'antd';\r\nimport { UserContext } from '../../context/UserContext/UserContext'\r\nimport {\r\n    Navbar,\r\n    Logo,\r\n    User,\r\n    UserName,\r\n    UserAvatar,\r\n    DropdownDiv,\r\n    UsersFirstName,\r\n    UsersEmail,\r\n    Span\r\n} from './style/index'\r\nimport { Avatar, Menu, Dropdown, Divider } from 'antd';\r\nimport { UserOutlined, LogoutOutlined, } from \"@ant-design/icons\";\r\nimport 'antd/dist/antd.css';\r\n\r\n\r\nconst Header = () => {\r\n    const [userFirstName, setUserFirstName] = useState('')\r\n    const [userLastName, setUserLastName] = useState('')\r\n    const [userEmail, setUserEmail] = useState('')\r\n    const [userImage, setUserImage] = useState(null)\r\n\r\n    const { user, setUser } = useContext(UserContext)\r\n\r\n    const history = useHistory();\r\n\r\n    const onLogout = () => {\r\n        firebase.auth().signOut()\r\n            .then(() => {\r\n                localStorage.removeItem('Authorization')\r\n                localStorage.removeItem('userId')\r\n                history.replace('/')\r\n            })\r\n    }\r\n\r\n    // const userInfo = getUserData().then((data) => {\r\n    //     console.log('user data ===========> $', data[0]);\r\n    //     // setUser(data[0])\r\n    //     // setUserFirstName(data[0].name)\r\n    //     // setUserEmail(data[0].email)\r\n    //     // setUserImage(data[0].url)\r\n    // });\r\n\r\n\r\n    const getUserData = () => {\r\n        const userID = localStorage.getItem('userId')\r\n        // console.log('USER ID============>',userID);\r\n        firebase\r\n            .firestore()\r\n            .collection(\"Users\")\r\n            .where(\"userId\", \"==\", userID)\r\n            .get()\r\n            .then(function (querySnapshot) {\r\n                const comlist = [];\r\n                querySnapshot.forEach(function (doc) {\r\n                    if (doc.exists) {\r\n                        const comp = doc.data();\r\n                        comlist.push({ ...comp, compId: doc.id });\r\n                    } else {\r\n                        message.info(\"No such document!\");\r\n                    }\r\n                });\r\n                setUser(comlist)\r\n            })\r\n            .catch(function (error) {\r\n                console.log(\"Error getting documents: \", error);\r\n            });\r\n\r\n    }\r\n    useEffect(() => {\r\n        getUserData()\r\n    }, [])\r\n    \r\n    const showProfile = () => {\r\n        history.replace('/home/user-profile')\r\n    }\r\n    useEffect(()=>{\r\n        user&&user.map((item, key)=>{\r\n            setUserLastName(item.name)\r\n            setUserFirstName(item.name)\r\n            setUserImage(item.url)\r\n            setUserEmail(item.email)\r\n        })\r\n    },[user])\r\n  \r\n\r\n    const menu = (\r\n        <Menu>\r\n                    <>          \r\n            <DropdownDiv>\r\n                <Avatar\r\n                    src={userImage}\r\n                    size={64}\r\n                    icon={!userImage ? <UserOutlined /> : ''}\r\n                />\r\n                <UsersFirstName>Hello {userLastName ? userLastName : 'User'}</UsersFirstName>\r\n                <UsersEmail>{userEmail}</UsersEmail>\r\n                <Divider />\r\n            </DropdownDiv>\r\n            <Menu.Item>\r\n                <a onClick={showProfile}>\r\n                    <UserOutlined />\r\n                    Profile\r\n            </a>\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n                <a>\r\n                    3rd menu item\r\n            </a>\r\n            </Menu.Item>\r\n            <Menu.Item>\r\n                <a onClick={onLogout}>\r\n\r\n                    <LogoutOutlined />\r\n                Logout\r\n                </a>\r\n            </Menu.Item>\r\n            </>\r\n        </Menu>\r\n    );\r\n    return (\r\n        <div>\r\n            <Navbar>\r\n                <Logo src='https://1000logos.net/wp-content/uploads/2017/08/CAT-logo.png' />\r\n                <User>\r\n                    <UserName>User First Name</UserName>\r\n                    <UserAvatar>\r\n                        <Dropdown overlay={menu}>\r\n                            <a className=\"ant-dropdown-link\" onClick={(e) => e.preventDefault()}>\r\n                                <Avatar\r\n                                    src={userImage}\r\n                                    size='large'\r\n                                    icon={!userImage ? <UserOutlined /> : ''}\r\n                                />\r\n                            </a>\r\n                        </Dropdown>\r\n                    </UserAvatar>\r\n                </User>\r\n            </Navbar>\r\n        </div>\r\n    )\r\n}\r\nexport default Header\r\n","E:\\salman\\Sales-App\\src\\components\\Inventory\\inventory.js",["230","231","232","233","234"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport firebase from '../../config/Firebase/firebase';\r\nimport { VendorCustomerContext } from '../../context/Random/random'\r\nimport {\r\n    CreateInventory,\r\n    getInentoryDetails,\r\n    CapitalizeWords,\r\n    getInventoryItemData\r\n} from '../../Utils/utils'\r\nimport { UserContext } from '../../context/UserContext/UserContext'\r\nimport { PlusSquareOutlined } from \"@ant-design/icons\";\r\n\r\nimport {\r\n    Divider, message, Row, Col, Input, Button, Select, Modal, Table, Space, Alert, Tabs\r\n} from 'antd'\r\n\r\nconst Inventory = () => {\r\n    const { user, allInventoryItems } = useContext(UserContext)\r\n    const value = useContext(VendorCustomerContext)\r\n    console.log('valiue--------->', value.allInventoryItems)\r\n\r\n    const [itemName, setItemsName] = useState()\r\n    const [itemID,setItemID] = useState()\r\n    const [unitOfMeassure, setUnitOfMeassure] = useState()\r\n    const [inventoryItems, setInventoryItems] = useState()\r\n    const [itemDetails, setItemDetails] = useState()\r\n    const [allItemsName, setAllItemsName] = useState()\r\n    // ----------------------------------------------------\r\n    const [retreiveItem, setRetreiveItem] = useState('')\r\n    const [specificItemData, setSpecificItemData] = useState()\r\n\r\n    //#region  modal\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [updateInventoryModal, setUpdateInventoryModal] = useState(false)\r\n    const itemDataObj = {\r\n        name: user && user[0].name,\r\n        itemId:itemID,\r\n        email: user && user[0].email,\r\n        url: user && user[0].url,\r\n        unitOfMeassure,\r\n        date: new Date().toJSON().slice(0, 10).replace(/-/g, '/'),\r\n        itemsName: CapitalizeWords(itemName),\r\n        quantity: 0\r\n    }\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n    const showUpdateInventoryModal = () => {\r\n        setUpdateInventoryModal(true);\r\n    };\r\n    const closeUpdateInventoryModal = () => {\r\n        setUpdateInventoryModal(false);\r\n    };\r\n    const handleOk = () => {\r\n        if (!itemName) return message.error('Items can not be left empty')\r\n        if (!unitOfMeassure) return message.error('Select Unit of Meassure')\r\n        if ( itemID < 0 ) return message.error('Items Id not acceptable')\r\n        CreateInventory(itemDataObj)\r\n        setItemsName('')\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    //----------Inventory Details--------------\r\n\r\n    const [isInventoryModalVisible, setIsInventoryModalVisible] = useState(false);\r\n    const showInventoryModal = (id) => {\r\n        getInentoryDetails(id).then(data => {\r\n            setItemDetails(data)\r\n        })\r\n        setIsInventoryModalVisible(true)\r\n    }\r\n    const onInvModalClose = () => {\r\n        setIsInventoryModalVisible(false);\r\n    };\r\n    //#endregion\r\n\r\n    const { Option } = Select;\r\n\r\n    useEffect(() => {\r\n        itemDetails && itemDetails.map((item, key) => {\r\n            setAllItemsName(item)\r\n        })\r\n    }, [])\r\n\r\n    console.log('retreiveItem', retreiveItem);\r\n    const getItemData = (retreiveItem) => {\r\n        console.log('retreiveItem', retreiveItem);\r\n    }\r\n    useEffect(() => {\r\n        // getInventoryItemData(retreiveItem)\r\n        if (!retreiveItem) {\r\n            <Alert\r\n                message=\"Error\"\r\n                description=\"Select item.\"\r\n                type=\"error\"\r\n                showIcon\r\n            />\r\n        }\r\n        else {\r\n            getInventoryItemData(retreiveItem).then((data) => {\r\n                console.log('specific item detail data function called', data)\r\n                setSpecificItemData(data[0].quantity)\r\n            })\r\n        }\r\n    }, [retreiveItem])\r\n\r\n    // console.log('specificItemData', specificItemData)\r\n\r\n    function UOM(value) {\r\n        setUnitOfMeassure(value)\r\n    }\r\n\r\n    function getItemQuantity(value) {\r\n        setRetreiveItem(value)\r\n    }\r\n\r\n    const GetAllInventory = () => {\r\n        firebase\r\n            .firestore()\r\n            .collection(\"Item_Master\")\r\n            .onSnapshot(function (querySnapshot) {\r\n                const inventoryList = [];\r\n                querySnapshot.forEach(function (doc) {\r\n                    if (doc.exists) {\r\n                        const comp = doc.data();\r\n                        inventoryList.push({ ...comp, compId: doc.id });\r\n                    } else {\r\n                        message.info('No data! Please insert some')\r\n                    }\r\n                });\r\n                setInventoryItems(inventoryList)\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        GetAllInventory()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Items Name',\r\n            dataIndex: 'itemsName',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'Unit Of Meassure',\r\n            dataIndex: 'unitOfMeassure',\r\n            key: 'uom',\r\n        },\r\n        {\r\n            title: 'Quantity',\r\n            dataIndex: 'quantity',\r\n            key: 'quantity',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (inventoryItems) => (\r\n                <Space size=\"middle\">\r\n                    <Button\r\n                        onClick={() => showInventoryModal(inventoryItems.iD)}\r\n                    >Details</Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <h1>INVENTORY</h1>\r\n            <Divider />\r\n            <Button onClick={showModal}>\r\n                <PlusSquareOutlined />\r\n                Add New Items\r\n            </Button>\r\n            <Button onClick={showUpdateInventoryModal}>\r\n                <PlusSquareOutlined />\r\n                Update Inventory\r\n            </Button>\r\n            <Modal title=\"Add New Item\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={14}>\r\n                        <Input\r\n                            type='text'\r\n                            placeholder='Enter item name'\r\n                            value={itemName}\r\n                            onChange={e => setItemsName(e.target.value)}\r\n                            maxLength={25}\r\n                        />\r\n                    </Col>\r\n                    <Col xs={24} sm={14}>\r\n                        <Input\r\n                            type='number'\r\n                            placeholder='Enter item ID'\r\n                            // value={itemName}\r\n                            onChange={e => setItemID(e.target.value)}\r\n                            maxLength={3}\r\n                        />\r\n                    </Col>\r\n                    \r\n                    <Col xs={24} sm={10}>\r\n                        <Select placeholder=\"Select Type\" onChange={UOM}>\r\n                            <Option value=\"packet\">Packet</Option>\r\n                            <Option value=\"dozen\">Dozen</Option>\r\n                            <Option value=\"single\">Single</Option>\r\n                        </Select>\r\n\r\n                    </Col>\r\n                    <Col sm={24}>\r\n                        <p>\r\n                            By default quantity will be zero.\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            </Modal>\r\n\r\n            <Modal title=\"Item Detail\" visible={isInventoryModalVisible} onCancel={onInvModalClose}>\r\n                <h3>Inventory details</h3>\r\n\r\n            </Modal>\r\n\r\n            <Modal\r\n                title=\"Update Inventory\"\r\n                visible={updateInventoryModal}\r\n                onCancel={closeUpdateInventoryModal}>\r\n\r\n                <h3>Update inventory modal</h3>\r\n                {console.log('itemName.itemsName', allInventoryItems && allInventoryItems)}\r\n                <Row gutter={[10, 10]}>\r\n                    <Col xs={24} sm={10}>\r\n                        <Select placeholder=\"Select Type\" style={{ width: '170px' }} onChange={getItemQuantity}>\r\n                            {value.allInventoryItems && value.allInventoryItems.map((itemName, key) => <Select.Option\r\n                                value={itemName.itemsName}\r\n                            >\r\n                                {itemName.itemsName}\r\n                            </Select.Option>\r\n                            )}\r\n                        </Select>\r\n\r\n                    </Col>\r\n                    <Col xs={24} sm={10}>\r\n                        <Input placeholder='Show item quantity here' value={specificItemData} disabled />\r\n                    </Col>\r\n                    <Col xs={24} sm={10}>\r\n                        <Input placeholder='Add new amount of inventory' disabled={!specificItemData} />\r\n                    </Col>\r\n                    {/* <Col xs={24} sm={10}>\r\n                            <Button onClick={getItemData}>Update Inentory</Button>\r\n                        </Col> */}\r\n                </Row>\r\n            </Modal>\r\n          \r\n                    <div>\r\n                        <Table dataSource={inventoryItems} columns={columns} />;\r\n                     </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Inventory","E:\\salman\\Sales-App\\src\\components\\Vendor\\index.js",["235","236","237","238"],"import React, { useState, useEffect } from 'react'\r\nimport { useFormik } from 'formik'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { validationSchema } from './schema'\r\nimport { createVendor, updateVendor } from '../../Utils/utils'\r\nimport { Label } from '../Textbox/style/index'\r\nimport { VendorMainDiv, FormDiv} from './style/index'\r\nimport ErrorText from '../FormError/formError'\r\nimport AllVendors from '../AllVendors/allVendors';\r\nimport {\r\n    Divider,\r\n    Tabs,\r\n    Row,\r\n    Col,\r\n    // Form,\r\n    Input\r\n} from 'antd';\r\nconst initialValues = {\r\n    companyName: '',\r\n    ownerFirstName: '',\r\n    ownerLastName: '',\r\n    address: '',\r\n    phone: '',\r\n    email: '',\r\n    // country: '',\r\n    city: '',\r\n    postalCode: ''\r\n}\r\n// const validate = values => {\r\n//     const errors = {}\r\n//     if (!values.companyName) {\r\n//         errors.companyName = 'Field Required'\r\n//     }\r\n//     else if (values.companyName.length < 4) {\r\n//         errors.companyName = 'Company name is too short'\r\n//     }\r\n//     if (!values.ownerFirstName || values.ownerFirstName < 5) {\r\n//         errors.ownerFirstName = 'Invalid Name'\r\n//     }\r\n//     if (!values.ownerLastName || values.ownerLastName < 5) {\r\n//         errors.ownerLastName = 'Invalid Name'\r\n//     }\r\n//     if (!values.address) {\r\n//         errors.address = 'Field Required'\r\n//     }\r\n//     else if(values.address. length < 15){\r\n//         errors.address = 'Enter valid address'\r\n//     }\r\n//     if (!values.phone) {\r\n//         errors.phone = 'Field Required'\r\n//     }\r\n//     else if(values.phone.length < 11){\r\n//         errors.phone = 'Invalid phone number'\r\n//     }\r\n//     if (!values.email) {\r\n//         errors.email = 'Field Required'\r\n//     }\r\n//     else if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(values.email)) {\r\n//         errors.email = 'Invalid email format'\r\n//     }\r\n//     // if(!values.country){\r\n//     //     errors.country = 'Required'\r\n//     // }else if(values.country  )\r\n//     if (!values.city) {\r\n//         errors.city = 'Field Required'\r\n//     }\r\n//     else if (values.city.length < 7 || values.city.length > 15) {\r\n//         errors.city = 'Invalid city name'\r\n//     }\r\n//     if (!values.postalCode || values.postalCode.length < 5) {\r\n//         errors.postalCode = 'Enter valid postal code'\r\n//     }\r\n//     return errors\r\n// }\r\nconst Vendor = () => {\r\n\r\n    const [vendorId, setVendorId] = useState('')\r\n\r\n    // const venId = () => {\r\n    //     setVendorId(uuidv4())\r\n    // }\r\n    const onSubmit = (values,onSubmitProps) => {\r\n        createVendor(values, vendorId)\r\n        onSubmitProps.resetForm()\r\n    }\r\n    // useEffect(() => {\r\n    //     venId()\r\n    //     updateVendor()\r\n    // }, [])\r\n\r\n    const formik = useFormik({\r\n        initialValues,\r\n        onSubmit,\r\n        validationSchema\r\n    })\r\n\r\n\r\n    const { TabPane } = Tabs;\r\n    function callback(key) {\r\n        console.log(key);\r\n    }\r\n    // console.log('Formik visited fiedls', formik.touched);\r\n    return (\r\n        <div>\r\n            <h1>Vendor</h1>\r\n            <Divider />\r\n            <Tabs defaultActiveKey=\"1\" onChange={callback}>\r\n                <TabPane tab=\"Create Vendor\" key=\"1\">\r\n                    <VendorMainDiv>\r\n                        <form\r\n                            onSubmit={formik.handleSubmit}\r\n                        >\r\n                            <FormDiv>\r\n                               \r\n                                <Row gutter={[10, 10]}>\r\n                                    <Col xs={24} sm={8}>\r\n                                        <Label>\r\n                                            Company Name:\r\n                                <Input\r\n                                                type='text'\r\n                                                name='companyName'\r\n                                                {...formik.getFieldProps('companyName')}\r\n                                            />\r\n                                        </Label>\r\n                                        {formik.touched.companyName && formik.errors.companyName\r\n                                            ? <ErrorText text={formik.errors.companyName} />\r\n                                            : null}\r\n                                    </Col>\r\n                                    <Col xs={24} sm={8}>\r\n                                        <Label>\r\n                                            Owner First Name:\r\n                                <Input\r\n                                                type='text'\r\n                                                name='ownerFirstName'\r\n                                                {...formik.getFieldProps('ownerFirstName')}\r\n                                            />\r\n                                        </Label>\r\n                                        {formik.touched.ownerFirstName && formik.errors.ownerFirstName\r\n                                            ? <ErrorText text={formik.errors.ownerFirstName} />\r\n                                            : null}\r\n                                    </Col>\r\n                                    <Col xs={24} sm={8}>\r\n                                        <Label>Owner Last Name:\r\n                                    <Input\r\n                                                type='text'\r\n                                                name='ownerLastName'\r\n                                                {...formik.getFieldProps('ownerLastName')}\r\n\r\n                                            />\r\n                                        </Label>\r\n                                        {formik.touched.ownerLastName && formik.errors.ownerLastName\r\n                                            ? <ErrorText text={formik.errors.ownerLastName} />\r\n                                            : null}\r\n                                    </Col>\r\n                                    <Col xs={24} sm={24}>\r\n                                        <Label>Address:\r\n                                    <Input\r\n                                                type='text'\r\n                                                name='address'\r\n                                                {...formik.getFieldProps('address')}\r\n                                            />\r\n                                        </Label>\r\n                                        {formik.touched.address && formik.errors.address\r\n                                            ? <ErrorText text={formik.errors.address} />\r\n                                            : null}\r\n                                    </Col>\r\n                                    <Col xs={24} sm={6}>\r\n                                        <Label>Phone#:\r\n                                    <Input\r\n                                                type='number'\r\n                                                name='phone'\r\n                                                {...formik.getFieldProps('phone')}\r\n                                            />\r\n                                        </Label>\r\n                                        {formik.touched.phone && formik.errors.phone\r\n                                            ? <ErrorText text={formik.errors.phone} />\r\n                                            : null}\r\n                                    </Col>\r\n                                    <Col xs={24} sm={6}>\r\n                                        <Label>Email:\r\n                                    <Input\r\n                                                type='email'\r\n                                                name='email'\r\n                                                {...formik.getFieldProps('email')}\r\n                                            />\r\n                                        </Label>\r\n                                        {formik.touched.email && formik.errors.email\r\n                                            ? <ErrorText text={formik.errors.email} />\r\n                                            : null}\r\n                                    </Col>\r\n                                    {/* <Col xs={24} sm={6}>\r\n                                        <Label>Coutnry:\r\n                                    <Input\r\n                                                type='text'\r\n                                                name='country'\r\n                                                value={formik.values.country}\r\n                                                onChange={formik.handleChange}\r\n                                            />\r\n                                        </Label>\r\n                                    </Col> */}\r\n                                    <Col xs={24} sm={6}>\r\n                                        <Label>City:\r\n                                    <Input\r\n                                                type='text'\r\n                                                name='city'\r\n                                                {...formik.getFieldProps('city')}\r\n                                            />\r\n                                        </Label>\r\n                                        {formik.touched.city && formik.errors.city\r\n                                            ? <ErrorText text={formik.errors.city} />\r\n                                            : null}\r\n                                    </Col>\r\n                                    <Col xs={24} sm={6}>\r\n                                        <Label>Postl Code:\r\n                                    <Input\r\n                                                type='number'\r\n                                                name='postalCode'\r\n                                                {...formik.getFieldProps('postalCode')}\r\n                                            />\r\n                                        </Label>\r\n                                        {formik.touched.postalCode && formik.errors.postalCode\r\n                                            ? <ErrorText text={formik.errors.postalCode} />\r\n                                            : null}\r\n                                    </Col>\r\n\r\n                                </Row>\r\n                                <Col xs={24} sm={16}>\r\n                                    <button type='submit' disabled={!formik.isValid}>Submit</button>\r\n                                </Col>\r\n                            </FormDiv>\r\n                        </form>\r\n                    </VendorMainDiv>\r\n                </TabPane>\r\n                <TabPane tab=\"All Vendors\" key=\"2\">\r\n                    <AllVendors />\r\n\r\n                </TabPane>\r\n\r\n            </Tabs>\r\n        </div >\r\n    )\r\n}\r\nexport default Vendor","E:\\salman\\Sales-App\\src\\Utils\\skeleton.js",["239"],"import React from \"react\";\r\nimport {\r\nSkeleton, Row, Col, Space\r\n} from 'antd'\r\n\r\n const TableSkeleton = () => {\r\n    return(\r\n        <div>\r\n              <Row gutter={[10, 10]}>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\r\n                </Col>\r\n            </Row>\r\n\r\n            <Row gutter={[10, 10]}>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\r\n                </Col>\r\n            </Row>\r\n           \r\n            <Row gutter={[10, 10]}>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\r\n                </Col>\r\n                <Col>\r\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\r\n                </Col>\r\n            </Row>\r\n\r\n        </div>\r\n    )\r\n}\r\nconst ParaSkeleton = () => {\r\n    return(\r\n        <div>\r\n            <Skeleton active />\r\n        </div>\r\n    )\r\n}\r\nexport {\r\n    TableSkeleton,\r\n    ParaSkeleton\r\n}","E:\\salman\\Sales-App\\src\\components\\Details\\styles\\index.js",[],"E:\\salman\\Sales-App\\src\\components\\RequestForQuotation\\style\\index.js",[],"E:\\salman\\Sales-App\\src\\components\\Vendor\\style\\index.js",[],"E:\\salman\\Sales-App\\src\\components\\Vendor\\schema.js",[],"E:\\salman\\Sales-App\\src\\components\\AllVendors\\allVendors.js",["240","241","242","243","244","245","246","247","248","249","250"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport firebase from '../../config/Firebase/firebase';\r\nimport {getAllVendors} from '../../Utils/utils'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { EmptyDiv } from './style/index'\r\nimport { Empty, Table, Space, Button } from 'antd';\r\nimport loader from '../../assets/loader.gif'\r\n\r\nimport { VendorCustomerContext } from '../../context/Random/random'\r\nimport { TableDiv, LoaderDiv } from './style/index'\r\n\r\nconst AllVendors = () => {\r\n    const [isVendor, setIsVendor] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const history = useHistory()\r\n    const [allVendors, setAllVendors] = useState()\r\n\r\n    const value = useContext(VendorCustomerContext)\r\n    const { vendors, setVendors } = useContext(VendorCustomerContext)\r\n    console.log('vendors',vendors);\r\n\r\n    // const getAllVendors = () => {\r\n    //     setIsLoading(true)\r\n    //     firebase\r\n    //         .firestore()\r\n    //         .collection(\"Vendor\")\r\n    //         .onSnapshot(function (querySnapshot) {\r\n    //             const vendorList = [];\r\n    //             querySnapshot.forEach(function (doc) {\r\n    //                 console.log('functions Doc', doc.data)\r\n    //                 if (doc.exists) {\r\n    //                     const comp = doc.data();\r\n    //                     vendorList.push({ ...comp, compId: doc.id });\r\n    //                     setIsVendor(true)\r\n    //                 } else {\r\n    //                     // alert(\"No such document!\");\r\n    //                     // <EmptyDiv>\r\n    //                     //     <Empty/>\r\n    //                     // </EmptyDiv>\r\n    //                     setIsVendor(false)\r\n                        \r\n    //                 }\r\n    //             });\r\n    //             setAllVendors(vendorList)\r\n    //             setVendors(vendorList)\r\n    //             setIsLoading(false)\r\n    //             // setIsVendor(true)\r\n    //         });\r\n    // }\r\n \r\nconsole.log('All Vendors from context-------->', vendors);\r\n    const updateVendor = (e) => {\r\n        console.log('update E', e)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            title: 'Company Name',\r\n            dataIndex: 'companyName',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'FirstName',\r\n            dataIndex: 'ownerFirstName',\r\n            key: 'firstname',\r\n        },\r\n        {\r\n            title: 'LastName',\r\n            dataIndex: 'ownerLastName',\r\n            key: 'lastname',\r\n        },\r\n        {\r\n            title: 'Phone',\r\n            dataIndex: 'phone',\r\n            key: 'phone',\r\n        },\r\n        {\r\n            title: 'Address',\r\n            dataIndex: 'address',\r\n            key: 'address',\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            render: (allVendors) => (\r\n                <Space size=\"middle\">\r\n                    <Button\r\n                        onClick={() =>\r\n                            history.push(`/home/vendor-details/${allVendors.compId}/${'Vendor'}`)}\r\n                    >Details</Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n    const checkVendor = () => {\r\n        if (isVendor) {\r\n            return <TableDiv>\r\n                <Table dataSource={allVendors} columns={columns} />;\r\n            </TableDiv>\r\n        }\r\n        // else if (!isVendor || isLoading) {\r\n        //     return <LoaderDiv><img src={loader} /></LoaderDiv>\r\n        // }\r\n        // return <EmptyDiv> <Empty /> </EmptyDiv>\r\n\r\n\r\n    }\r\n    useEffect(() => {\r\n        getAllVendors().then(data => {\r\n            console.log('then all vendors', data);\r\n            setAllVendors(data)\r\n        })\r\n    }, [])\r\n\r\n    console.log('All vendros', vendors);\r\n    return (\r\n        <div>\r\n\r\n            {checkVendor()}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default AllVendors","E:\\salman\\Sales-App\\src\\components\\FormError\\formError.js",[],"E:\\salman\\Sales-App\\src\\components\\Textbox\\style\\index.js",[],"E:\\salman\\Sales-App\\src\\components\\FormError\\style\\index.js",[],"E:\\salman\\Sales-App\\src\\components\\Cutomer\\validationSchema.js",[],"E:\\salman\\Sales-App\\src\\components\\AllVendors\\style\\index.js",[],"E:\\salman\\Sales-App\\src\\components\\Header\\style\\index.js",["251"],"import styled from 'styled-components'\r\nimport media from '../../MediaQuery/media'\r\n\r\nexport const Navbar = styled.div`\r\ndisplay: flex;\r\njustify-content: space-between;\r\nalign-items: center;\r\nheight: 50px;\r\nborder-bottom: 1px solid gray;\r\nbox-shadow: 5px 2px 15px #888888;\r\n`\r\nexport const Logo = styled.img`\r\nwidth:50px;\r\nheight: 50px;\r\nmargin-left: 10px;\r\n// justify-content: flex-start;\r\n`\r\nexport const User = styled.div`\r\ndisplay: flex;\r\nalign-items: center;\r\n`\r\nexport const UserName = styled.div`\r\nmargin-right: 10px;\r\n`\r\nexport const UserAvatar = styled.div`\r\nmargin-right: 10px;\r\n`\r\nexport const DropdownDiv = styled.div`\r\ntext-align: center;\r\njustify-content: center;\r\nalign-items: center;\r\nmargin-top: 10px;\r\nwidth:250px;\r\noverflow: hidden;\r\npadding:12px;\r\n`\r\nexport const UsersFirstName = styled.h4`\r\nmargin-top:15px;\r\nword-spacing:1px;\r\n`\r\nexport const UsersEmail = styled.p`\r\n\r\n`\r\nexport const Span = styled.span`\r\nmargin-right: 10px;\r\n`\r\n\r\n\r\n","E:\\salman\\Sales-App\\src\\components\\AllCustomers\\allCustomers.js",["252"],"import React, { useState, useEffect, useContext } from 'react'\r\nimport firebase from '../../config/Firebase/firebase';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { EmptyDiv } from './style/index'\r\nimport { Empty, Button } from 'antd';\r\nimport {VendorCustomerContext} from '../../context/Random/random'\r\nimport {\r\n    TableDiv,\r\n    Table,\r\n    TableRow,\r\n    TableData,\r\n    TableHeading,\r\n    TableHead,\r\n    TableBody\r\n} from './style/index'\r\n\r\n\r\nconst AllCustomers = () => {\r\n    const [isCustomer, setIsCustomer] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const value = useContext(VendorCustomerContext)\r\n    const { customers, setCustomers } = useContext(VendorCustomerContext)\r\n    console.log('all customers', value)\r\n\r\n    const getAllCustomers = () => {\r\n        firebase\r\n            .firestore()\r\n            .collection(\"Customer\")\r\n            .onSnapshot(function (querySnapshot) {\r\n                const customerList = [];\r\n                querySnapshot.forEach(function (doc) {\r\n                    console.log('functions Doc', doc.data)\r\n                    if (doc.exists) {\r\n                        const comp = doc.data();\r\n                        customerList.push({ ...comp, compId: doc.id });\r\n                        setIsCustomer(true)\r\n                    } else {\r\n                        setIsCustomer(false)\r\n                    }\r\n                });\r\n                setCustomers(customerList)\r\n            });\r\n    }\r\n    \r\n    const checkCustomer = () => {\r\n        if (isCustomer) {\r\n            return <TableDiv>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableHeading>BusinessName</TableHeading>\r\n                        <TableHeading>BillToAddress</TableHeading>\r\n                        <TableHeading>Phone</TableHeading>\r\n                        <TableHeading>Email</TableHeading>\r\n                        <TableHeading>City</TableHeading>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {customers &&\r\n                            customers.map((customer, index) => {\r\n                                return (\r\n                                    <TableRow>\r\n                                        <TableData>[{customer.businessName}]</TableData>\r\n                                        <TableData>[{customer.billToAddress}]</TableData>\r\n                                        <TableData>[{customer.phone}]</TableData>\r\n                                        <TableData>[{customer.email}]</TableData>\r\n                                        <TableData>[{customer.city}]</TableData>\r\n                                        <TableData>\r\n                                            {/* <button onClick={() => history.push(`/home/update-customer/:${customer.compId}`)}>\r\n                                                Update customer\r\n                                            </button> */}\r\n                                        </TableData>\r\n                                        <TableData>\r\n                                            <Button onClick={() =>\r\n                                                history.push(`/home/customer-details/${customer.compId}/${'Customer'}`)\r\n                                            } >\r\n                                                customer Details\r\n                                            </Button>\r\n                                        </TableData>\r\n                                        <TableData>\r\n                                            <Button onClick={() =>\r\n                                                history.push(`/home/customer-order/${customer.compId}/${'Customer'}`)\r\n                                            } >\r\n                                                customer order\r\n                                            </Button>\r\n                                        </TableData>\r\n                                    </TableRow>\r\n                                );\r\n                            })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableDiv>\r\n        }\r\n        return <EmptyDiv> <Empty /> </EmptyDiv>\r\n    }\r\n    useEffect(() => {\r\n        getAllCustomers()\r\n    }, [])\r\n\r\n    // console.log('All Customers', allCustomers);\r\n    return (\r\n        <div>\r\n            {checkCustomer()}\r\n        </div>\r\n    )\r\n}\r\nexport default AllCustomers","E:\\salman\\Sales-App\\src\\components\\UserProfile\\style\\index.js",[],"E:\\salman\\Sales-App\\src\\config\\Route\\routes.js",[],"E:\\salman\\Sales-App\\src\\components\\AllCustomers\\style\\index.js",[],{"ruleId":"253","replacedBy":"254"},{"ruleId":"255","replacedBy":"256"},{"ruleId":"257","severity":1,"message":"258","line":1,"column":17,"nodeType":"259","messageId":"260","endLine":1,"endColumn":25},{"ruleId":"261","severity":1,"message":"262","line":35,"column":8,"nodeType":"263","endLine":35,"endColumn":10,"suggestions":"264"},{"ruleId":"257","severity":1,"message":"265","line":1,"column":27,"nodeType":"259","messageId":"260","endLine":1,"endColumn":37},{"ruleId":"257","severity":1,"message":"266","line":25,"column":12,"nodeType":"259","messageId":"260","endLine":25,"endColumn":24},{"ruleId":"257","severity":1,"message":"267","line":25,"column":26,"nodeType":"259","messageId":"260","endLine":25,"endColumn":41},{"ruleId":"268","severity":1,"message":"269","line":7,"column":13,"nodeType":"270","messageId":"271","endLine":7,"endColumn":15},{"ruleId":"268","severity":1,"message":"269","line":7,"column":31,"nodeType":"270","messageId":"271","endLine":7,"endColumn":33},{"ruleId":"268","severity":1,"message":"269","line":7,"column":45,"nodeType":"270","messageId":"271","endLine":7,"endColumn":47},{"ruleId":"257","severity":1,"message":"258","line":1,"column":15,"nodeType":"259","messageId":"260","endLine":1,"endColumn":23},{"ruleId":"257","severity":1,"message":"272","line":1,"column":25,"nodeType":"259","messageId":"260","endLine":1,"endColumn":34},{"ruleId":"257","severity":1,"message":"265","line":1,"column":27,"nodeType":"259","messageId":"260","endLine":1,"endColumn":37},{"ruleId":"257","severity":1,"message":"273","line":3,"column":10,"nodeType":"259","messageId":"260","endLine":3,"endColumn":31},{"ruleId":"257","severity":1,"message":"274","line":20,"column":3,"nodeType":"259","messageId":"260","endLine":20,"endColumn":9},{"ruleId":"257","severity":1,"message":"275","line":51,"column":13,"nodeType":"259","messageId":"260","endLine":51,"endColumn":24},{"ruleId":"257","severity":1,"message":"276","line":141,"column":11,"nodeType":"259","messageId":"260","endLine":141,"endColumn":26},{"ruleId":"257","severity":1,"message":"265","line":1,"column":15,"nodeType":"259","messageId":"260","endLine":1,"endColumn":25},{"ruleId":"261","severity":1,"message":"277","line":37,"column":8,"nodeType":"263","endLine":37,"endColumn":10,"suggestions":"278"},{"ruleId":"261","severity":1,"message":"279","line":44,"column":8,"nodeType":"263","endLine":44,"endColumn":10,"suggestions":"280"},{"ruleId":"281","severity":1,"message":"282","line":87,"column":21,"nodeType":"263","messageId":"283","endLine":134,"endColumn":6},{"ruleId":"261","severity":1,"message":"277","line":39,"column":8,"nodeType":"263","endLine":39,"endColumn":10,"suggestions":"284"},{"ruleId":"261","severity":1,"message":"277","line":38,"column":8,"nodeType":"263","endLine":38,"endColumn":10,"suggestions":"285"},{"ruleId":"286","severity":1,"message":"287","line":149,"column":32,"nodeType":"288","messageId":"289","endLine":149,"endColumn":33},{"ruleId":"257","severity":1,"message":"290","line":15,"column":5,"nodeType":"259","messageId":"260","endLine":15,"endColumn":9},{"ruleId":"257","severity":1,"message":"291","line":23,"column":12,"nodeType":"259","messageId":"260","endLine":23,"endColumn":25},{"ruleId":"261","severity":1,"message":"292","line":77,"column":8,"nodeType":"263","endLine":77,"endColumn":10,"suggestions":"293"},{"ruleId":"294","severity":1,"message":"295","line":83,"column":35,"nodeType":"296","messageId":"297","endLine":83,"endColumn":37},{"ruleId":"298","severity":1,"message":"299","line":106,"column":17,"nodeType":"300","endLine":106,"endColumn":42},{"ruleId":"298","severity":1,"message":"299","line":112,"column":17,"nodeType":"300","endLine":112,"endColumn":20},{"ruleId":"298","severity":1,"message":"299","line":117,"column":17,"nodeType":"300","endLine":117,"endColumn":39},{"ruleId":"298","severity":1,"message":"299","line":134,"column":29,"nodeType":"300","endLine":134,"endColumn":98},{"ruleId":"257","severity":1,"message":"301","line":14,"column":84,"nodeType":"259","messageId":"260","endLine":14,"endColumn":88},{"ruleId":"257","severity":1,"message":"302","line":27,"column":12,"nodeType":"259","messageId":"260","endLine":27,"endColumn":24},{"ruleId":"294","severity":1,"message":"295","line":83,"column":52,"nodeType":"296","messageId":"297","endLine":83,"endColumn":54},{"ruleId":"261","severity":1,"message":"303","line":86,"column":8,"nodeType":"263","endLine":86,"endColumn":10,"suggestions":"304"},{"ruleId":"257","severity":1,"message":"305","line":89,"column":11,"nodeType":"259","messageId":"260","endLine":89,"endColumn":22},{"ruleId":"257","severity":1,"message":"272","line":1,"column":27,"nodeType":"259","messageId":"260","endLine":1,"endColumn":36},{"ruleId":"257","severity":1,"message":"306","line":3,"column":16,"nodeType":"259","messageId":"260","endLine":3,"endColumn":22},{"ruleId":"257","severity":1,"message":"307","line":5,"column":24,"nodeType":"259","messageId":"260","endLine":5,"endColumn":36},{"ruleId":"257","severity":1,"message":"308","line":77,"column":22,"nodeType":"259","messageId":"260","endLine":77,"endColumn":33},{"ruleId":"257","severity":1,"message":"309","line":3,"column":21,"nodeType":"259","messageId":"260","endLine":3,"endColumn":26},{"ruleId":"257","severity":1,"message":"310","line":2,"column":8,"nodeType":"259","messageId":"260","endLine":2,"endColumn":16},{"ruleId":"257","severity":1,"message":"311","line":5,"column":10,"nodeType":"259","messageId":"260","endLine":5,"endColumn":18},{"ruleId":"257","severity":1,"message":"312","line":6,"column":10,"nodeType":"259","messageId":"260","endLine":6,"endColumn":15},{"ruleId":"257","severity":1,"message":"313","line":7,"column":8,"nodeType":"259","messageId":"260","endLine":7,"endColumn":14},{"ruleId":"257","severity":1,"message":"314","line":10,"column":20,"nodeType":"259","messageId":"260","endLine":10,"endColumn":29},{"ruleId":"257","severity":1,"message":"315","line":13,"column":22,"nodeType":"259","messageId":"260","endLine":13,"endColumn":33},{"ruleId":"257","severity":1,"message":"316","line":14,"column":12,"nodeType":"259","messageId":"260","endLine":14,"endColumn":21},{"ruleId":"257","severity":1,"message":"317","line":14,"column":23,"nodeType":"259","messageId":"260","endLine":14,"endColumn":35},{"ruleId":"257","severity":1,"message":"318","line":18,"column":11,"nodeType":"259","messageId":"260","endLine":18,"endColumn":16},{"ruleId":"257","severity":1,"message":"319","line":19,"column":22,"nodeType":"259","messageId":"260","endLine":19,"endColumn":32},{"ruleId":"257","severity":1,"message":"320","line":52,"column":11,"nodeType":"259","messageId":"260","endLine":52,"endColumn":23},{"ruleId":"257","severity":1,"message":"321","line":2,"column":8,"nodeType":"259","messageId":"260","endLine":2,"endColumn":13},{"ruleId":"261","severity":1,"message":"322","line":97,"column":8,"nodeType":"263","endLine":97,"endColumn":10,"suggestions":"323"},"no-native-reassign",["324"],"no-negated-in-lhs",["325"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setAllInventoryItems' and 'setVendors'. Either include them or remove the dependency array.","ArrayExpression",["326"],"'useContext' is defined but never used.","'errorMessage' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'VendorCustomerContext' is defined but never used.","'Select' is defined but never used.","'RangePicker' is assigned a value but never used.","'disableWeekends' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'Cname' and 'slug'. Either include them or remove the dependency array.",["327"],"React Hook useEffect has missing dependencies: 'DisableButton' and 'slug'. Either include them or remove the dependency array.",["328"],"no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray",["329"],["330"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Span' is defined but never used.","'userFirstName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.",["331"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Tabs' is defined but never used.","'allItemsName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'itemDetails'. Either include it or remove the dependency array.",["332"],"'getItemData' is assigned a value but never used.","'uuidv4' is defined but never used.","'updateVendor' is defined but never used.","'setVendorId' is assigned a value but never used.","'Space' is defined but never used.","'firebase' is defined but never used.","'EmptyDiv' is defined but never used.","'Empty' is defined but never used.","'loader' is defined but never used.","'LoaderDiv' is defined but never used.","'setIsVendor' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'value' is assigned a value but never used.","'setVendors' is assigned a value but never used.","'updateVendor' is assigned a value but never used.","'media' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllCustomers'. Either include it or remove the dependency array.",["333"],"no-global-assign","no-unsafe-negation",{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"336","fix":"340"},{"desc":"336","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},"Update the dependencies array to be: [setAllInventoryItems, setVendors]",{"range":"348","text":"349"},"Update the dependencies array to be: [Cname, slug]",{"range":"350","text":"351"},"Update the dependencies array to be: [DisableButton, slug]",{"range":"352","text":"353"},{"range":"354","text":"351"},{"range":"355","text":"351"},"Update the dependencies array to be: [getUserData]",{"range":"356","text":"357"},"Update the dependencies array to be: [itemDetails]",{"range":"358","text":"359"},"Update the dependencies array to be: [getAllCustomers]",{"range":"360","text":"361"},[1111,1113],"[setAllInventoryItems, setVendors]",[1065,1067],"[Cname, slug]",[1897,1899],"[DisableButton, slug]",[1113,1115],[1056,1058],[2448,2450],"[getUserData]",[3048,3050],"[itemDetails]",[4258,4260],"[getAllCustomers]"]