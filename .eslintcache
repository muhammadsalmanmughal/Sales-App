[{"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/index.js":"1","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/reportWebVitals.js":"2","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/App.js":"3","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/context/Random/random.js":"4","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/config/Route/index.js":"5","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Layout/layout.js":"6","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Login/Login.js":"7","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Signup/signup.js":"8","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/Utils/utils.js":"9","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/NavigationLinks/navLinks.js":"10","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/context/UserContext/UserContext.js":"11","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Login/style/index.js":"12","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Signup/style/index.js":"13","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Vendor/index.js":"14","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Header/header.js":"15","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/config/Firebase/firebase.js":"16","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Dashboard/dashboard.js":"17","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Sidebar/sidebar.js":"18","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/UserProfile/userProfile.js":"19","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Details/customerDetails.js":"20","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Cutomer/updateCustomer.js":"21","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Cutomer/cutomer.js":"22","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/RequestForQuotation/requestForQuotation.js":"23","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/CustomerOrder/customerOrder.js":"24","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Inventory/inventory.js":"25","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Details/vendorDetails.js":"26","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/PurchaseOrder/purchaseOrder.js":"27","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/PurchaseOrder/purchaseOrderDetails.js":"28","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Invoice/allInvoices.js":"29","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/MediaQuery/media.js":"30","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Cutomer/validationSchema.js":"31","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/AllCustomers/allCustomers.js":"32","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/Utils/skeleton.js":"33","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Details/styles/index.js":"34","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/RequestForQuotation/style/index.js":"35","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Vendor/style/index.js":"36","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/FormError/formError.js":"37","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Textbox/style/index.js":"38","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/UserProfile/style/index.js":"39","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/config/Route/routes.js":"40","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/AllVendors/allVendors.js":"41","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Vendor/schema.js":"42","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Header/style/index.js":"43","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/FormError/style/index.js":"44","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/AllCustomers/style/index.js":"45","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/AllVendors/style/index.js":"46","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/PurchaseOrder/style/index.js":"47","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/404/pagenotfound.js":"48","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/BOM/bom.js":"49","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Delivery/delivery.js":"50","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Production/production.js":"51","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/PurchaseRequisition/purchaseRequisition.js":"52","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/Utils/styles.js":"53","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Delivery/validationSchema.js":"54","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/CustomerInvoice/customerInvoice.js":"55","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/CustomerInvoice/style.js":"56","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/PurchaseRequisition/style.js":"57"},{"size":500,"mtime":1613196501516,"results":"58","hashOfConfig":"59"},{"size":362,"mtime":1613196501516,"results":"60","hashOfConfig":"59"},{"size":845,"mtime":1617027514898,"results":"61","hashOfConfig":"59"},{"size":683,"mtime":1622135630635,"results":"62","hashOfConfig":"59"},{"size":735,"mtime":1622041163901,"results":"63","hashOfConfig":"59"},{"size":3420,"mtime":1623603512108,"results":"64","hashOfConfig":"59"},{"size":2461,"mtime":1616488290961,"results":"65","hashOfConfig":"59"},{"size":3112,"mtime":1613225394688,"results":"66","hashOfConfig":"59"},{"size":20058,"mtime":1624956603874,"results":"67","hashOfConfig":"59"},{"size":1492,"mtime":1623599107034,"results":"68","hashOfConfig":"59"},{"size":396,"mtime":1624948479404,"results":"69","hashOfConfig":"59"},{"size":2463,"mtime":1613196501480,"results":"70","hashOfConfig":"59"},{"size":2543,"mtime":1613224103600,"results":"71","hashOfConfig":"59"},{"size":9891,"mtime":1624954679562,"results":"72","hashOfConfig":"59"},{"size":4523,"mtime":1616851711440,"results":"73","hashOfConfig":"59"},{"size":443,"mtime":1613207603188,"results":"74","hashOfConfig":"59"},{"size":212,"mtime":1616852644549,"results":"75","hashOfConfig":"59"},{"size":1121,"mtime":1624860686500,"results":"76","hashOfConfig":"59"},{"size":435,"mtime":1613280527796,"results":"77","hashOfConfig":"59"},{"size":6791,"mtime":1623599135363,"results":"78","hashOfConfig":"59"},{"size":196,"mtime":1618404765149,"results":"79","hashOfConfig":"59"},{"size":21737,"mtime":1624954407354,"results":"80","hashOfConfig":"59"},{"size":9681,"mtime":1624956976941,"results":"81","hashOfConfig":"59"},{"size":10512,"mtime":1624863216449,"results":"82","hashOfConfig":"59"},{"size":5492,"mtime":1623515541267,"results":"83","hashOfConfig":"59"},{"size":5929,"mtime":1624821100642,"results":"84","hashOfConfig":"59"},{"size":29192,"mtime":1624956536688,"results":"85","hashOfConfig":"59"},{"size":8661,"mtime":1624880927823,"results":"86","hashOfConfig":"59"},{"size":6766,"mtime":1624861476194,"results":"87","hashOfConfig":"59"},{"size":490,"mtime":1613196501484,"results":"88","hashOfConfig":"59"},{"size":1676,"mtime":1624951470193,"results":"89","hashOfConfig":"59"},{"size":1835,"mtime":1624948479324,"results":"90","hashOfConfig":"59"},{"size":2564,"mtime":1618671488462,"results":"91","hashOfConfig":"59"},{"size":94,"mtime":1621449570736,"results":"92","hashOfConfig":"59"},{"size":761,"mtime":1620826871455,"results":"93","hashOfConfig":"59"},{"size":407,"mtime":1614357627506,"results":"94","hashOfConfig":"59"},{"size":214,"mtime":1613580190494,"results":"95","hashOfConfig":"59"},{"size":212,"mtime":1613282260836,"results":"96","hashOfConfig":"59"},{"size":167,"mtime":1613280633076,"results":"97","hashOfConfig":"59"},{"size":2510,"mtime":1624874487925,"results":"98","hashOfConfig":"59"},{"size":1818,"mtime":1624948479356,"results":"99","hashOfConfig":"59"},{"size":1288,"mtime":1624954617496,"results":"100","hashOfConfig":"59"},{"size":909,"mtime":1613275852144,"results":"101","hashOfConfig":"59"},{"size":93,"mtime":1613843005107,"results":"102","hashOfConfig":"59"},{"size":691,"mtime":1613878829436,"results":"103","hashOfConfig":"59"},{"size":691,"mtime":1613843933983,"results":"104","hashOfConfig":"59"},{"size":495,"mtime":1623875221969,"results":"105","hashOfConfig":"59"},{"size":264,"mtime":1621960978962,"results":"106","hashOfConfig":"59"},{"size":9168,"mtime":1624956955593,"results":"107","hashOfConfig":"59"},{"size":15100,"mtime":1623592294295,"results":"108","hashOfConfig":"59"},{"size":17823,"mtime":1624818202999,"results":"109","hashOfConfig":"59"},{"size":15925,"mtime":1624956533764,"results":"110","hashOfConfig":"59"},{"size":2894,"mtime":1623851504081,"results":"111","hashOfConfig":"59"},{"size":854,"mtime":1620926071368,"results":"112","hashOfConfig":"59"},{"size":8269,"mtime":1624864761792,"results":"113","hashOfConfig":"59"},{"size":123,"mtime":1623873975569,"results":"114","hashOfConfig":"59"},{"size":247,"mtime":1623603512104,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"1g41l0r",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"118"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"118"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"118"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"118"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"118"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"118"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"118"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"118"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"118"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"118"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"219"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"222"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"118"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"118"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/index.js",[],["247","248"],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/reportWebVitals.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/App.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/context/Random/random.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/config/Route/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Layout/layout.js",["249"],"import React, { useEffect, useContext } from 'react'\nimport { getAllVendors, getAllInventoryItems, getAllCustomers, GetAllBom } from '../../Utils/utils'\nimport { Switch, Route, useHistory } from 'react-router-dom'\nimport {\n  SideBar, Header,\n  Dashboard,\n  Vendor,\n  UserProfile,\n  Customer,\n  RequestForQuotation,\n  PurchaseOrder,\n  VendorDetails,\n  CustomerDetails,\n  CustomerOrder,\n  UpdateCustomer,\n  Inventory,\n  PurchaseOrderDetails,\n  AllInvoices,\n  PurchaseRequisition,\n  Delivery,\n  BillOfMaterial,\n  Production,\n  CustomerInvoice,\n  PageNotFound\n} from '../NavigationLinks/navLinks'\nimport { VendorCustomerContext } from '../../context/Random/random'\nimport { UserProvider } from '../../context/UserContext/UserContext'\nimport './layout.css'\n\nfunction Layout () {\n  const { setVendors, setAllInventoryItems, setCustomers, setBomItems } = useContext(VendorCustomerContext)\n\n  useEffect(() => {\n    getAllVendors().then(data => {\n      setVendors(data)\n    })\n\n    getAllInventoryItems().then(data => {\n      setAllInventoryItems(data)\n    })\n\n    getAllCustomers().then(data => {\n      setCustomers(data)\n    })\n\n    GetAllBom().then(data => {\n      setBomItems(data)\n    })\n  }, [])\n\n  const history = useHistory()\n  const token = localStorage.getItem('Authorization')\n  if (!token) {\n    history.replace('/')\n    return null\n  }\n  return (\n    <div>\n      <UserProvider>\n        <Header />\n        <div className='main'>\n            <div className='sidebar'>\n                <SideBar />\n              </div>\n            <div className='content'>\n                <Switch>\n                    <Route path='/home/dashboard' component={Dashboard} />\n                    <Route path='/home/user-profile' component={UserProfile} />\n                    <Route path='/home/vendor' component={Vendor} />\n                    <Route path='/home/customer' component={Customer} />\n                    <Route path='/home/request-for-quotation/' component={RequestForQuotation} />\n                    <Route path='/home/request-for-quotation/:slug/:Cname' component={RequestForQuotation} />\n                    <Route path='/home/purchase-order' component={PurchaseOrder} />\n                    <Route path='/home/purchase-order-details/:slug/' component={PurchaseOrderDetails} />\n                    <Route path='/home/vendor-details/:slug/:Cname' component={VendorDetails} />\n                    <Route path='/home/customer-details/:slug/:Cname' component={CustomerDetails} />\n                    <Route path='/home/customer-order/:slug/:Cname' component={CustomerOrder} />\n                    <Route path='/home/update-customer/:data' component={UpdateCustomer} />\n                    <Route path='/home/inventory' component={Inventory} />\n                    <Route path='/home/invoices' component={AllInvoices} />\n                    <Route path='/home/purchase-requisition' component={PurchaseRequisition} />\n                    <Route path='/home/production' component={Production} />\n                    <Route path='/home/bill-of-material' component={BillOfMaterial} />\n                    <Route path='/home/customer-invoice' component={CustomerInvoice} />\n                    <Route path='/home/delivery' component={Delivery} />\n                    <Route component={PageNotFound} />\n\n                  </Switch>\n              </div>\n          </div>\n      </UserProvider>\n    </div>\n\n  )\n}\nexport default Layout\n","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Login/Login.js",["250","251","252"],"import React, { useState, useContext } from 'react'\nimport { loginUser } from '../../Utils/utils';\nimport { useHistory } from \"react-router-dom\";\nimport 'antd/dist/antd.css';\nimport { message } from 'antd';\n\nimport {\n    LoginContainer,\n    LoginDiv,\n    LoginHeading,\n    LoginForm,\n    UserEmailTextbox,\n    PasswordTextbox,\n    PrimaryButton,\n    TextWelcome,\n    Paragraph,\n    BreakLine,\n    Link\n} from './style/index'\n\nexport default function Login() {\n    const history = useHistory();\n    const [email, setUserEmail] = useState();\n    const [password, setPassword] = useState();\n    const [errorMessage, setErrorMessage] = useState(false)\n\n    if (localStorage.getItem('Authorization')) {\n        history.replace('/home')\n        // return\n    }\n    const onLogin = () => {\n        if (!email || !password) {\n            message.error('Enter valid credentials')\n        } else {\n            loginUser(email, password)\n                .then((res) => {\n                    // let token = res.auth.\n                    let token = 'dummy_token'\n                    localStorage.setItem('Authorization', token)\n                    history.replace('/home')\n                });\n        }\n    }\n    return (\n        <div>\n            <LoginContainer>\n                <LoginDiv>\n                    <TextWelcome>\n                        Welcome\n                    </TextWelcome>\n                    <LoginHeading>\n                        Login to Sales-App\n                    </LoginHeading>\n                    <LoginForm>\n                        <UserEmailTextbox\n                            type='text'\n                            placeholder='Email'\n                            onChange={e => setUserEmail(e.target.value)}\n                        />\n                        <PasswordTextbox\n                            type='password'\n                            placeholder='Password'\n                            onChange={e => setPassword(e.target.value)}\n                        />\n                        <PrimaryButton onClick={onLogin}>Continue</PrimaryButton>\n                    </LoginForm>\n                    <BreakLine />\n                    <Paragraph>\n                        Don't have an account?\n                   <Link onClick={() => history.push(\"/signup\")}>\n                            SignUp\n                   </Link>\n                    </Paragraph>\n                </LoginDiv>\n            </LoginContainer>\n        </div>\n    )\n}","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Signup/signup.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/Utils/utils.js",["253","254","255"],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/NavigationLinks/navLinks.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/context/UserContext/UserContext.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Login/style/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Signup/style/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Vendor/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Header/header.js",["256","257","258","259","260","261","262","263"],"import React, { useState, useContext, useEffect } from 'react'\nimport firebase from '../../config/Firebase/firebase'\nimport { useHistory } from 'react-router-dom'\nimport { message } from 'antd';\nimport { UserContext } from '../../context/UserContext/UserContext'\nimport {\n    Navbar,\n    Logo,\n    User,\n    UserName,\n    UserAvatar,\n    DropdownDiv,\n    UsersFirstName,\n    UsersEmail,\n    Span\n} from './style/index'\nimport { Avatar, Menu, Dropdown, Divider } from 'antd';\nimport { UserOutlined, LogoutOutlined, } from \"@ant-design/icons\";\nimport 'antd/dist/antd.css';\n\n\nconst Header = () => {\n    const [userFirstName, setUserFirstName] = useState('')\n    const [userLastName, setUserLastName] = useState('')\n    const [userEmail, setUserEmail] = useState('')\n    const [userImage, setUserImage] = useState(null)\n\n    const { user, setUser } = useContext(UserContext)\n\n    const history = useHistory();\n\n    const onLogout = () => {\n        firebase.auth().signOut()\n            .then(() => {\n                localStorage.removeItem('Authorization')\n                localStorage.removeItem('userId')\n                history.replace('/')\n            })\n    }\n\n    // const userInfo = getUserData().then((data) => {\n    //     console.log('user data ===========> $', data[0]);\n    //     // setUser(data[0])\n    //     // setUserFirstName(data[0].name)\n    //     // setUserEmail(data[0].email)\n    //     // setUserImage(data[0].url)\n    // });\n\n\n    const getUserData = () => {\n        const userID = localStorage.getItem('userId')\n        // console.log('USER ID============>',userID);\n        firebase\n            .firestore()\n            .collection(\"Users\")\n            .where(\"userId\", \"==\", userID)\n            .get()\n            .then(function (querySnapshot) {\n                const comlist = [];\n                querySnapshot.forEach(function (doc) {\n                    if (doc.exists) {\n                        const comp = doc.data();\n                        comlist.push({ ...comp, compId: doc.id });\n                    } else {\n                        message.info(\"No such document!\");\n                    }\n                });\n                setUser(comlist)\n            })\n            .catch(function (error) {\n                console.log(\"Error getting documents: \", error);\n            });\n\n    }\n    useEffect(() => {\n        getUserData()\n    }, [])\n    \n    const showProfile = () => {\n        history.replace('/home/user-profile')\n    }\n    useEffect(()=>{\n        user&&user.map((item, key)=>{\n            setUserLastName(item.name)\n            setUserFirstName(item.name)\n            setUserImage(item.url)\n            setUserEmail(item.email)\n        })\n    },[user])\n  \n\n    const menu = (\n        <Menu>\n                    <>          \n            <DropdownDiv>\n                <Avatar\n                    src={userImage}\n                    size={64}\n                    icon={!userImage ? <UserOutlined /> : ''}\n                />\n                <UsersFirstName>Hello {userLastName ? userLastName : 'User'}</UsersFirstName>\n                <UsersEmail>{userEmail}</UsersEmail>\n                <Divider />\n            </DropdownDiv>\n            <Menu.Item>\n                <a onClick={showProfile}>\n                    <UserOutlined />\n                    Profile\n            </a>\n            </Menu.Item>\n            <Menu.Item>\n                <a>\n                    3rd menu item\n            </a>\n            </Menu.Item>\n            <Menu.Item>\n                <a onClick={onLogout}>\n\n                    <LogoutOutlined />\n                Logout\n                </a>\n            </Menu.Item>\n            </>\n        </Menu>\n    );\n    return (\n        <div>\n            <Navbar>\n                <Logo src='https://1000logos.net/wp-content/uploads/2017/08/CAT-logo.png' />\n                <User>\n                    <UserName>User First Name</UserName>\n                    <UserAvatar>\n                        <Dropdown overlay={menu}>\n                            <a className=\"ant-dropdown-link\" onClick={(e) => e.preventDefault()}>\n                                <Avatar\n                                    src={userImage}\n                                    size='large'\n                                    icon={!userImage ? <UserOutlined /> : ''}\n                                />\n                            </a>\n                        </Dropdown>\n                    </UserAvatar>\n                </User>\n            </Navbar>\n        </div>\n    )\n}\nexport default Header\n","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/config/Firebase/firebase.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Dashboard/dashboard.js",["264"],"import React,{useContext} from 'react'\n\nimport './Styled/index.css'\nconst Dashboard = () => {\n\n    return (\n        <div>\n\n            <h1>Dashboard</h1>\n          \n        </div>\n    )\n}\nexport default Dashboard","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Sidebar/sidebar.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/UserProfile/userProfile.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Details/customerDetails.js",["265","266"],"import React, { useEffect, useState } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { getSpecificData, UpdateCustomer } from '../../Utils/utils'\nimport { CaretLeftOutlined } from \"@ant-design/icons\";\nimport { Goback } from '../../Utils/styles'\nimport {\n    Divider,\n    Row,\n    Col,\n    Input,\n    Button,\n    Switch\n} from 'antd';\nconst CustomerDetails = () => {\n    const [detailsData, setDetailsData] = useState(\n        {\n            billToAddress: \"\",\n            CustomerName: \"\",\n            companyName:\"\",\n            city: \"\",\n            compId: \"\",\n            email: \"\",\n            state: '',\n            iD: \"\",\n            phone: '',\n            postalCode: '',\n            responsibleName: \"\",\n            responsiblePhone: \"\",\n            secondaryPhone: \"\",\n            state:''\n        }\n    )\n    const [isDisable, setisDisable] = useState(true)\n    const { slug, Cname } = useParams()\n    const history = useHistory();\n    useEffect(() => {\n        getSpecificData(slug, Cname).then(data => {\n            setDetailsData(data[0])\n        })\n        DisableFields(false)\n    }, [])\n\n    function DisableFields(checked) {\n        setisDisable(checked)\n    }\n    const changeHandler = (key, value) => {\n        setDetailsData({ ...detailsData, [value]: key.target.value })\n    }\n    const updateCustomer = () => {\n        UpdateCustomer(detailsData, detailsData.compId)\n    }\n\n    return (\n        <div>\n            <Goback onClick={e => history.goBack()}>\n                <CaretLeftOutlined /> GoBack\n            </Goback>\n            <h2>Customer Details page</h2>\n            <label> Update\n                <Switch\n                    size='small'\n                    onChange={DisableFields}\n                />\n            </label>\n            <div>\n                <Divider orientation=\"left\">\n                    <h2>Name</h2>\n                </Divider>\n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={16}>\n                        <h2>Name:</h2>\n                        {\n                            <Input type='text' value={detailsData.CustomerName}\n                                onChange={(e) => changeHandler(e, 'CustomerName')}\n                                disabled={!isDisable}\n                            />\n                        }\n                    </Col>\n\n                    <Col xs={24} sm={8}>\n                        <h2>Company:</h2>\n                        <Input type='text' value={detailsData.CompanyName}\n                            onChange={(e) => changeHandler(e, 'CompanyName')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n\n                </Row>\n               \n                <Divider orientation=\"left\">\n                    <h2>Address</h2>\n                </Divider>\n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={16}>\n                        <h2>State:</h2>\n                        <Input type='text' value={detailsData.State}\n                            onChange={(e) => changeHandler(e, 'State')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                    <Col xs={24} sm={8}>\n                        <h2>City:</h2>\n                        <Input type='text' value={detailsData.City}\n                            onChange={(e) => changeHandler(e, 'City')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={16}>\n                        <h2>Address:</h2>\n                        <Input type='text' value={detailsData.BillToAddress}\n                            onChange={(e) => changeHandler(e, 'BillToAddress')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                    <Col xs={24} sm={8}>\n                        <h2>PostalCode:</h2>\n                        <Input type='text' value={detailsData.PostalCode}\n                            onChange={(e) => changeHandler(e, 'PostalCode')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                </Row>\n                \n                <Divider orientation='left'>\n                    <h2>Contact</h2>\n                </Divider>\n                \n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={16}>\n                        <h2>Email:</h2>\n                        <Input type='text' value={detailsData.Email}\n                            onChange={(e) => changeHandler(e, 'Email')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                    <Col xs={24} sm={8}>\n                        <h2>Phone Number:</h2>\n                        <Input type='text' value={detailsData.Phone}\n                            onChange={(e) => changeHandler(e, 'Phone')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                    <Col xs={24} sm={8}>\n                        <h2>Secondary Phone Number:</h2>\n                        <Input type='text' value={detailsData.SecondaryPhone}\n                            onChange={(e) => changeHandler(e, 'SecondaryPhone')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                </Row>\n                \n                <Divider orientation='left'>\n                    <h2>Responsible Details</h2>\n                </Divider>\n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={16}>\n                        <h2>Name:</h2>\n                        <Input type='text' value={detailsData.ResponsibleName}\n                            onChange={(e) => changeHandler(e, 'ResponsibleName')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                    <Col xs={24} sm={8}>\n                        <h2>Phone Number:</h2>\n                        <Input type='text' value={detailsData.ResponsiblePhone}\n                            onChange={(e) => changeHandler(e, 'ResponsiblePhone')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={16}>\n                        <Button onClick={updateCustomer}\n                            disabled={!isDisable}\n                        >Update</Button>\n                    </Col>\n                </Row>\n            </div>\n        </div>\n    )\n}\nexport default CustomerDetails","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Cutomer/updateCustomer.js",["267","268"],"import React,{useState, useEffect} from 'react'\n\nconst UpdateCustomer = () => {\n    return(\n        <div>\n            <h2> update Customer</h2>\n        </div>\n    )\n}\nexport default UpdateCustomer","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Cutomer/cutomer.js",["269","270"],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/RequestForQuotation/requestForQuotation.js",["271","272"],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/CustomerOrder/customerOrder.js",["273","274","275"],"import React, { useEffect, useState, useContext} from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { getSpecificData, CapitalizeWords, CreateRecord } from '../../Utils/utils'\nimport { UserContext } from '../../context/UserContext/UserContext'\nimport { CaretLeftOutlined } from \"@ant-design/icons\";\nimport { Goback } from '../../Utils/styles'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport { FaRegClipboard } from \"react-icons/fa\";\nimport moment from 'moment'\n\nimport {\n    Divider,\n    message,\n    Row,\n    Col,\n    Input,\n    Button,\n    Tooltip,\n    DatePicker\n} from 'antd'\nimport {\n    ListItem,\n    ItemDiv,\n    QuantityAndButtonDiv,\n    Quantity,\n    DeleteButton,\n    H3,\n    Title\n} from '../../Utils/styles'\n\nconst CustomerOrder = () => {\n    const [detailsdData, setDetailsData] = useState(\n        {\n            BillToAddress: \"\",\n            CustomerName: \"\",\n            City: \"\",\n            compId: \"\",\n            email: \"\",\n            State: '',\n            iD: \"\",\n            Phone: '',\n            PostalCode: '',\n            responsibleName: \"\",\n            responsiblePhone: \"\",\n            secondaryPhone: \"\"\n        }\n    )\n    const { user } = useContext(UserContext)\n    const [orderDetails, setOrderDetails] = useState()\n    const [itemsList, setItemsList] = useState([])\n    const [disable, setDisabled] = useState(false)\n    const [items, setItems] = useState()\n    const [itemQuantity, setItemQuantity] = useState()\n    const [requiredDate, setRequiredDate] = useState();\n    const [itemPrice, setItemPrice] = useState()\n    const [discription, setDiscription] = useState('Nothing')\n    let current_datetime = new Date()\n    let currentDate = current_datetime.getDate() + \"-\" + (current_datetime.getMonth() + 1) + \"-\" + current_datetime.getFullYear()\n    const shortid = require('shortid')\n    const orderID = shortid.generate()\n\n    const { slug, Cname } = useParams()\n    const history = useHistory();\n\n    useEffect(() => {\n        getSpecificData(slug, Cname).then(data => {\n            setDetailsData(data[0])\n        })\n    }, [])\n\n    useEffect(() => {\n        DisableButton()\n    }, [itemsList])\n    const customerOrder = () => {\n        const UserName= user&&user[0].name\n        const UserEmail= user&&user[0].email\n\n        if (!requiredDate) return message.error('Error! Select required date')\n        const { CustomerName, CompanyName, Phone, BillToAddress, State, City, PostalCode } = detailsdData\n\n        const customerObeject = {\n            CustomerName, CompanyName, Phone, BillToAddress, State, City, PostalCode,\n            itemsList, orderID, currentDate, requiredDate,UserName,UserEmail,newOrderDate:'Not-Set',\n            Status:'In-Progress',previousDate:''\n        }\n        CreateRecord(customerObeject, 'Customer_Order', 'Customers order has been placed')\n        setItemsList([])\n        setOrderDetails('')\n    }\n\n    const DisableButton = () => {\n        if (itemsList.length === 0) return setDisabled(true)\n        setDisabled(false)\n    }\n\n    function disabledDate(current) {\n        return current && current < moment().endOf('day')\n    }\n\n    const selectRequiredDate = (date, dateString) => {\n        setRequiredDate(dateString)\n    }\n\n    const CreateList = () => {\n        const quantity = Number(itemQuantity)\n        if (!items) return message.error('Error! Items can not be left Empty')\n        if (isNaN(quantity) || quantity <= 0) return message.error('Error! Quantity amount not support')\n        if (!items || !quantity || !itemPrice) return message.error('Error! All fields should be filed')\n        if (isNaN(itemPrice) || quantity <= 0) return message.error('Error! Item price not supported')\n        else {\n            const item = CapitalizeWords(items)\n            const itemDetails = CapitalizeWords(discription)\n            setItemsList([...itemsList, { item, quantity, itemPrice, itemDetails }])\n            setItems('')\n            setItemQuantity('')\n            setItemPrice('')\n        }\n    }\n\n    const deleteItem = (id) => {\n        const newList = [...itemsList]\n        newList.splice(id, 1)\n        setItemsList(newList);\n    }\n    return (\n        <div>\n            <Goback onClick={e => history.goBack()}>\n                <CaretLeftOutlined /> GoBack\n            </Goback>\n            <Title>\n                Customer Order\n            </Title>\n            <Row gutter={[10, 10]}>\n                <Col>\n                    <div style={{ marginBottom: 16 }}>\n                        <Input addonAfter={\n                            <Tooltip placement=\"topRight\" title='Click to Copy'>\n                                <CopyToClipboard text={orderID}>\n                                    <FaRegClipboard\n                                        onClick={() => alert(orderID)}\n                                        style={{ cursor: 'pointer' }}\n                                    />\n                                </CopyToClipboard>\n                            </Tooltip>\n                        }\n                            value={orderID}\n                            disabled\n                        />\n                    </div>\n                </Col>\n                <Col xs={24} sm={12}>\n                    <h3>\n                        Date: {currentDate}\n                    </h3>\n                </Col>\n                <Col >\n                    <DatePicker\n                        placeholder='Requried Date'\n                        format=\"DD-MM-YYYY\"\n                        disabledDate={disabledDate}\n                        style={{ width: 200 }}\n                        onChange={selectRequiredDate}\n                    />\n                </Col>\n            </Row>\n            <Row gutter={[10, 10]}>\n                <Col xs={24} sm={8}>\n                    <h4>Name:</h4>\n                    {\n                        <h3>{detailsdData.CustomerName}</h3>\n                    }\n                </Col>\n                <Col xs={24} sm={8}>\n                    <h4>Company Name:</h4>\n                    {\n                        <h3>{detailsdData.CompanyName}</h3>\n                    }\n                </Col>\n                <Col xs={24} sm={8}>\n                    <h4>Phone:</h4>\n                    {\n                        <h3>{detailsdData.Phone}</h3>\n                    }\n                </Col>\n            </Row>\n            <Row gutter={[10, 10]}>\n                <Col xs={24} sm={24}>\n                    <h4>Address:</h4>\n                    {\n                        <h3>{detailsdData.BillToAddress}</h3>\n                    }\n                </Col>\n            </Row>\n            <Row gutter={[10, 10]}>\n                <Col xs={24} sm={8}>\n                    <h4>State</h4>\n                    {\n                        <h3>{detailsdData.State}</h3>\n                    }\n                </Col>\n                <Col xs={24} sm={8}>\n                    <h4>City</h4>\n                    {\n                        <h3>{detailsdData.City}</h3>\n                    }\n                </Col>\n                <Col xs={24} sm={8}>\n                    <h4>Postal Code</h4>\n                    {\n                        <h3>{detailsdData.PostalCode}</h3>\n                    }\n                </Col>\n            </Row>\n            <Divider>\n                <H3 style={{ textAlign: 'center' }}>ITEMS</H3>\n            </Divider>\n            <Row gutter={[10, 10]}>\n                <Col xs={24} sm={8}>\n                    <Input type='text' value={items} placeholder='Item Name' onChange={e => setItems(e.target.value)} maxLength={25} />\n                </Col>\n                <Col xs={24} sm={8}>\n                    <Input type='text' value={itemQuantity} placeholder='Item Quantity' onChange={e => setItemQuantity(e.target.value)} maxLength={2} />\n                </Col>\n                <Col xs={24} sm={8}>\n                    <Input type='text' value={itemPrice} placeholder='Item Price' onChange={e => setItemPrice(e.target.value)} maxLength={5} />\n                </Col>\n            </Row>\n            <Row gutter={[10, 10]}>\n\n                <Col xs={24} sm={24}>\n                    <Input type='text' value={discription} placeholder='Discription' onChange={e => setDiscription(e.target.value)} maxLength={50} />\n                </Col>\n                <Col xs={24} sm={1}>\n                    <Button\n                        onClick={CreateList}\n                    >Add</Button>\n                </Col>\n            </Row>\n            {/* <Row gutter={[10, 10]}>\n                <Col xs={24} sm={24}>\n                    <h4>Discription</h4>\n                    {\n                        <Input.TextArea\n                            value={orderDetails}\n                            rows={7}\n                            onChange={e => setOrderDetails(e.target.value)} />\n                    }\n                </Col>\n            </Row> */}\n\n            <ul>\n                {\n                    itemsList.map((item, key) => {\n                        return (\n                            <>\n                                <ListItem key={key} xs={24} sm={12}>\n                                    <ItemDiv>\n                                     Item Name:   {item.item}\n                                    </ItemDiv>\n                                    <QuantityAndButtonDiv>\n                                        <Quantity>\n                                           Quantity: {item.quantity}/\n                                        </Quantity>\n                                        <Quantity>\n                                            Total Amount: {item.quantity * item.itemPrice} Rs\n                                        </Quantity>\n                                        <DeleteButton>\n                                            <Button danger onClick={() => deleteItem(key)}>Delete</Button>\n                                        </DeleteButton>\n                                    </QuantityAndButtonDiv>\n\n                                </ListItem>\n                            </>\n                        )\n                    })\n                }\n            </ul>\n            <Row gutter={[10, 10]}>\n                <Col xs={24} sm={16}>\n                    <Button\n                        disabled={disable}\n                        onClick={customerOrder}>\n                        Create CustomerOrder\n                    </Button>\n                </Col>\n            </Row>\n        </div>\n    )\n}\nexport default CustomerOrder","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Inventory/inventory.js",["276","277","278"],"import React, { useState, useEffect, useContext } from 'react'\nimport {\n    getDataById,\n    getAllInventoryItems,\n    CapitalizeWords,\n    CreateRecord\n} from '../../Utils/utils'\nimport { UserContext } from '../../context/UserContext/UserContext'\nimport { PlusSquareOutlined } from \"@ant-design/icons\";\n\nimport {\n    message, Row, Col, Input, Button, Select, Modal, Table, Space\n} from 'antd'\nimport { Title } from '../../Utils/styles'\n\nconst Inventory = () => {\n    const { user } = useContext(UserContext)\n\n    const [itemName, setItemsName] = useState()\n    const [itemID, setItemID] = useState()\n    const [unitOfMeassure, setUnitOfMeassure] = useState()\n    const [inventoryItems, setInventoryItems] = useState()\n    const [itemDetails, setItemDetails] = useState()\n    const [allItemsName, setAllItemsName] = useState()\n    // ----------------------------------------------------\n\n\n\n    //#region  modal\n    const [isModalVisible, setIsModalVisible] = useState(false);\n    const itemDataObj = {\n        name: user && user[0].name,\n        itemId: itemID,\n        email: user && user[0].email,\n        url: user && user[0].url,\n        unitOfMeassure,\n        date: new Date().toJSON().slice(0, 10).replace(/-/g, '/'),\n        itemsName: CapitalizeWords(itemName),\n        quantity: 0\n    }\n    const showModal = () => {\n        setIsModalVisible(true);\n    }\n\n    const handleOk = () => {\n        if (!itemName) return message.error('Items can not be left empty')\n        if (!unitOfMeassure) return message.error('Select Unit of Meassure')\n        if (itemID < 0) return message.error('Items Id not acceptable')\n        CreateRecord(itemDataObj, 'Item_Master', 'Items added succesfully')\n        setItemsName('')\n    }\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n    }\n\n    //----------Inventory Details--------------\n\n    const [isInventoryModalVisible, setIsInventoryModalVisible] = useState(false);\n    const showInventoryModal = (id) => {\n        getDataById('Item_Master', id).then(data => {\n            setItemDetails(data)\n        })\n        setIsInventoryModalVisible(true)\n    }\n    const onInvModalClose = () => {\n        setIsInventoryModalVisible(false);\n    };\n    //#endregion\n\n    const { Option } = Select;\n\n    useEffect(() => {\n        itemDetails && itemDetails.map((item, key) => {\n            setAllItemsName(item)\n        })\n        getAllInventoryItems().then(data => {\n            setInventoryItems(data)\n        })\n    }, [])\n\n    function UOM(value) {\n        setUnitOfMeassure(value)\n    }\n\n    const columns = [\n        {\n            title: 'Items Id',\n            dataIndex: 'itemId',\n            key: 'id',\n        },\n        {\n            title: 'Items Name',\n            dataIndex: 'itemsName',\n            key: 'name',\n        },\n        {\n            title: 'Unit Of Meassure',\n            dataIndex: 'unitOfMeassure',\n            key: 'uom',\n        },\n        {\n            title: 'Quantity',\n            dataIndex: 'quantity',\n            key: 'quantity',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: (inventoryItems) => (\n                <Space size=\"middle\">\n                    <Button\n                        onClick={() => showInventoryModal(inventoryItems.iD)}\n                    >Details</Button>\n                </Space>\n            ),\n        },\n    ];\n\n    return (\n        <div>\n            <Title>INVENTORY</Title>\n            <Button onClick={showModal}>\n                <PlusSquareOutlined />\n                Add New Items\n            </Button>\n\n            <Modal title=\"Add New Item\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={14}>\n                        <Input\n                            type='text'\n                            placeholder='Enter item name'\n                            value={itemName}\n                            onChange={e => setItemsName(e.target.value)}\n                            maxLength={25}\n                        />\n                    </Col>\n                    <Col xs={24} sm={14}>\n                        <Input\n                            type='number'\n                            placeholder='Enter item ID'\n                            // value={itemName}\n                            onChange={e => setItemID(e.target.value)}\n                            maxLength={3}\n                        />\n                    </Col>\n\n                    <Col xs={24} sm={10}>\n                        <Select placeholder=\"Select Type\" onChange={UOM}>\n                            <Option value=\"packet\">Packet</Option>\n                            <Option value=\"dozen\">Dozen</Option>\n                            <Option value=\"single\">Single</Option>\n                            <Option value=\"sheet\">Sheet</Option>\n                        </Select>\n\n                    </Col>\n                    <Col sm={24}>\n                        <p>\n                            By default quantity will be zero.\n                        </p>\n                    </Col>\n                </Row>\n            </Modal>\n\n            <Modal title=\"Item Detail\" visible={isInventoryModalVisible} onCancel={onInvModalClose}>\n                <h3>Inventory details</h3>\n\n            </Modal>\n\n            <div>\n                <Table dataSource={inventoryItems} columns={columns} />;\n            </div>\n\n        </div>\n    )\n}\nexport default Inventory","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Details/vendorDetails.js",["279","280"],"import React, { useEffect, useState } from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { getSpecificData, UpdateVendor } from '../../Utils/utils'\nimport { CaretLeftOutlined } from \"@ant-design/icons\";\nimport { DetailsDiv } from './styles/index'\nimport { Goback } from '../../Utils/styles'\nimport {\n    Divider,\n    Row,\n    Col,\n    Input,\n    Button,\n    Switch\n} from 'antd';\nconst VendorDetails = () => {\n    const [isDisable, setisDisable] = useState(true)\n    const [detailsdData, setDetailsData] = useState(\n        {\n            ownerFirstName: \"\",\n            ownerLastName: '',\n            companyName: \"\",\n            city: \"\",\n            address: \"\",\n            email: \"\",\n            state: '',\n            iD: \"\",\n            phone: '',\n            postalCode: ''\n        }\n    )\n    const { slug, Cname } = useParams()\n    const history = useHistory();\n\n    useEffect(() => {\n        getSpecificData(slug, Cname).then(data => {\n            setDetailsData(data[0])\n        })\n        DisableFields(false)\n    }, [])\n\n    function DisableFields(checked) {\n        console.log(`switch to ${checked}`);\n        setisDisable(checked)\n    }\n    const changeHandler = (key, value) => {\n        setDetailsData({ ...detailsdData, [value]: key.target.value })\n    }\n    const updateVendor = () => {\n        UpdateVendor(detailsdData, detailsdData.compId)\n    }\n    return (\n        <DetailsDiv>\n            <Goback onClick={e => history.goBack()}>\n                <CaretLeftOutlined /> GoBack\n            </Goback>\n            <h2>Vendor Details page</h2>\n            <label> Update\n                <Switch\n                    size='small'\n                    onChange={DisableFields}\n                />\n            </label>\n\n            <div>\n                <Divider orientation=\"left\">\n                    <h2>Name</h2>\n                </Divider>\n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={8}>\n                        <h2>FirstName:</h2>\n                        {\n                            <Input type='text' value={detailsdData.ownerFirstName}\n                                onChange={(e) => changeHandler(e, 'ownerFirstName')}\n                                disabled={!isDisable}\n                            />\n                        }\n                    </Col>\n                    <Col xs={24} sm={8}>\n                        <h2>LastName:</h2>\n                        {\n                            <Input type='text' value={detailsdData.ownerLastName}\n                                onChange={(e) => changeHandler(e, 'ownerLastName')}\n                                disabled={!isDisable}\n                            />\n                        }\n                    </Col>\n                    <Col xs={24} sm={8}>\n                        <h2>Company:</h2>\n                        <Input type='text' value={detailsdData.companyName}\n                            onChange={(e) => changeHandler(e, 'companyName')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n\n                </Row>\n                <Divider orientation=\"left\">\n                    <h2>Address</h2>\n                </Divider>\n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={16}>\n                        <h2>State:</h2>\n                        <Input type='text' value={detailsdData.State}\n                            onChange={(e) => changeHandler(e, 'state')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                    <Col xs={24} sm={8}>\n                        <h2>City:</h2>\n                        <Input type='text' value={detailsdData.City}\n                            onChange={(e) => changeHandler(e, 'city')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={16}>\n                        <h2>Address:</h2>\n                        <Input type='text' value={detailsdData.Address}\n                            onChange={(e) => changeHandler(e, 'address')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                    <Col xs={24} sm={8}>\n                        <h2>PostalCode:</h2>\n                        <Input type='text' value={detailsdData.PostalCode}\n                            onChange={(e) => changeHandler(e, 'postalCode')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                </Row>\n                <Divider orientation='left'>\n                    <h2>Contact</h2>\n                </Divider>\n                <Row gutter={[10, 10]}>\n                    <Col xs={24} sm={16}>\n                        <h2>Email:</h2>\n                        <Input type='text' value={detailsdData.Email}\n                            onChange={(e) => changeHandler(e, 'email')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                    <Col xs={24} sm={8}>\n                        <h2>Phone Number:</h2>\n                        <Input type='text' value={detailsdData.Phone}\n                            onChange={(e) => changeHandler(e, 'phone')}\n                            disabled={!isDisable}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={10, 10}>\n                    <Col xs={24} sm={16}>\n                        <Button \n                        onClick={updateVendor}\n                        disabled={!isDisable}\n                        >Update</Button>\n                    </Col>\n                </Row>\n            </div>\n            {/* )\n            })} */}\n        </DetailsDiv>\n    )\n}\nexport default VendorDetails","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/PurchaseOrder/purchaseOrder.js",["281"],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/PurchaseOrder/purchaseOrderDetails.js",["282","283"],"import React, { useState, useEffect } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { CaretLeftOutlined } from \"@ant-design/icons\";\nimport { Goback } from '../../Utils/styles'\nimport { updateInventoryItem, CreateRecord, getDataById } from '../../Utils/utils'\nimport {\n    Input, Button, Skeleton, Table, Space, message, Drawer, Tabs, Tag, Empty\n} from 'antd'\n\nimport {\n    ListItem, ItemDiv, QuantityAndButtonDiv, Quantity\n} from '../RequestForQuotation/style/index'\n\n// import { H3 } from './style/index'\nimport { ItemsDiv, Title, Paragraph, H3 } from '../../Utils/styles'\n\nimport { TableSkeleton } from '../../Utils/skeleton'\nconst PurchaseOrderDetails = () => {\n    const [POItemData, setPOItemData] = useState()\n    const [visible, setVisible] = useState(false);\n    const [itemID, setItemID] = useState()\n    const [requestedQuantity, setRequestedQuantity] = useState()\n    const [itemQuantity, setItemQuantity] = useState()\n    const [collectionId, setCollectionId] = useState()\n    const [itemName, setItemName] = useState()\n    const [grItemList, setGrItemList] = useState()\n    const [updatedItem, setUpdatedItem] = useState([])\n\n\n    const history = useHistory()\n    const { slug } = useParams()\n\n    const current_datetime = new Date()\n    const formatted_date = current_datetime.getDate() + \"-\" + (current_datetime.getMonth() + 1) + \"-\" + current_datetime.getFullYear()\n    useEffect(() => {\n        getDataById('PurchaseOrder', slug).then(data => {\n            setPOItemData(data)\n            setGrItemList(data.flatMap(O => O.newList))\n        })\n    }, [])\n    const shortid = require('shortid')\n    const GRiD = shortid.generate()\n\n    const itemsList = POItemData?.flatMap(O => O.newList)\n\n    // ------------Drawer-------------\n    const showDrawer = (itemId, quantity, docId, name) => {\n        setVisible(true);\n        setItemID(itemId)\n        setRequestedQuantity(quantity)\n        setCollectionId(docId)\n        setItemName(name)\n    };\n\n    const handleOk = () => {\n        var numbers = /^[0-9]+$/;\n        if (!requestedQuantity) return message.error('Error! Invalid Quanity')\n        if (itemQuantity <= 0) return message.error('Error! Quantity cannot be less then or equal to zero');\n        // if (!itemQuantity) return message.error('Error! Quantity cannot be set empty');\n        if (!itemQuantity.match(numbers)) return message.error('Error! Number is in decimal')\n        if (requestedQuantity < itemQuantity) return message.error('Error! Retreive Quantity cannot be greator then Requested Quantity');\n\n        updateInventoryItem(collectionId, parseFloat(itemQuantity), itemName)\n        setUpdatedItem([...updatedItem, { itemName, itemQuantity }])\n        createGR(itemID, itemQuantity)\n        setItemQuantity('')\n        setVisible(false)\n\n    };\n\n    const onClose = () => {\n        setVisible(false);\n        setItemQuantity('')\n    };\n\n    const columns = [\n        {\n            title: 'Items ID',\n            dataIndex: 'itemId',\n            key: 'id',\n        },\n        {\n            title: 'Items Name',\n            dataIndex: 'items',\n            key: 'name',\n        },\n        {\n            title: 'Price Per Item',\n            dataIndex: 'itemPrice',\n            key: 'price',\n        },\n        {\n            title: 'Requested Quantity',\n            dataIndex: 'quantity',\n            key: 'requested_quantity',\n        },\n        {\n            title: 'Class',\n            dataIndex: 'radioValue',\n            key: 'class',\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: (allPO) => (\n                <Space size=\"middle\">\n                    <Button\n                        disabled={POItemData && POItemData[0].POStatus !== 'Approved' ? true : false}\n                        onClick={\n                            e => showDrawer(allPO.itemId, allPO.quantity, allPO.itemCollectionId, allPO.items)\n                        }\n                    >Update Inventory</Button>\n                </Space>\n            ),\n        },\n\n    ];\n\n\n    const createGR = (itemId, inceaseBy) => {\n        const goodReceipt =\n            grItemList.map(item => {\n                if (item.itemId !== itemId) return item\n                return {\n                    ...item,\n                    remainingQuantity: item.quantity - inceaseBy,\n                    retreiveQuantity: parseFloat(item.retreiveQuantity + inceaseBy),\n                }\n            })\n        setGrItemList(goodReceipt)\n        return goodReceipt\n    }\n\n    console.log('POItemData: ', POItemData);\n    const objGR = {\n        UserName:POItemData && POItemData[0].UserName,\n        UserEmail:POItemData && POItemData[0].UserEmail,\n        GR_id: GRiD,\n        POid: POItemData && POItemData[0].POiD,\n        Vendor: POItemData && POItemData[0].selectVendor,\n        Created_Date: formatted_date,\n        grItemList\n    }\n    \n    const createGRDoc = () => {\n        CreateRecord(objGR, 'Goods_Receipts', 'Goods Receipt created')\n        setUpdatedItem([])\n    }\n\n    return (\n        <div>\n            <Goback onClick={e => history.goBack()}>\n                <CaretLeftOutlined /> GoBack\n            </Goback>\n\n            <Title>Create Goods Receipt</Title>\n            <Paragraph>Goods Receipts id: <h3>{GRiD}</h3></Paragraph>\n\n            {POItemData ?\n                POItemData.map((item, key) => {\n                    return (\n                        <div>\n                            <Paragraph>PO-ID: {item.POiD}</Paragraph>\n                            <Paragraph>Requried Date: {item.requriedDate}</Paragraph>\n                            <Paragraph>created Date: {item.createdDate}</Paragraph>\n                            <Paragraph>Vendor Name: {item.selectVendor}</Paragraph>\n                            <Paragraph>Status: <Tag color={item.POStatus === 'Approved' ? 'green' : 'red'}>{item.POStatus}</Tag></Paragraph>\n                        </div>\n                    )\n                }) : <Skeleton active />\n            }\n            <ItemsDiv>\n                {itemsList ?\n                    <Table dataSource={itemsList} columns={columns} /> : <TableSkeleton />\n                }\n            </ItemsDiv>\n            <Button disabled={POItemData && POItemData[0].POStatus !== 'Approved' ? true : false}\n                onClick={createGRDoc}>Create GR</Button>\n\n            <div style={{ marginTop: '20px' }}>\n                <H3 style={{ textAlign: 'center' }}>UPDATED ITEMS</H3>\n                <ul>\n                    {updatedItem ?\n                        updatedItem.map((item, key) => {\n                            return (\n                                <>\n                                    <ListItem key={key} xs={24} sm={12}>\n                                        <ItemDiv>\n                                            {item.itemName}\n                                        </ItemDiv>\n                                        <QuantityAndButtonDiv>\n                                            <Quantity>\n                                                {item.itemQuantity}/\n                                                        {item.radioValue}\n                                            </Quantity>\n                                        </QuantityAndButtonDiv>\n\n                                    </ListItem>\n                                </>\n                            )\n                        })\n                        : <Empty />\n                    }\n                </ul>\n            </div>\n            <Drawer\n                title=\"Update item Inventory\"\n                placement=\"bottom\"\n                closable={false}\n                onClose={onClose}\n                visible={visible}\n                footer={\n                    <div\n                        style={{\n                            textAlign: 'right',\n                        }}\n                    >\n                        <Button onClick={onClose} style={{ marginRight: 8 }}>\n                            Cancel\n                                </Button>\n                        <Button onClick={handleOk} type=\"primary\">\n                            Submit\n                                </Button>\n                    </div>\n                }\n            >\n                <label>Item ID: {itemID}</label>\n                <Input\n                    type='number'\n                    value={itemQuantity}\n                    placeholder='Number of Quantity'\n                    maxLength={3}\n                    onChange={e => setItemQuantity(e.target.value)}\n                />\n            </Drawer>\n        </div>\n    )\n}\nexport default PurchaseOrderDetails","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Invoice/allInvoices.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/MediaQuery/media.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Cutomer/validationSchema.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/AllCustomers/allCustomers.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/Utils/skeleton.js",["284"],"import React from \"react\";\nimport {\nSkeleton, Row, Col, Space\n} from 'antd'\n\n const TableSkeleton = () => {\n    return(\n        <div>\n              <Row gutter={[10, 10]}>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\n                </Col>\n            </Row>\n\n            <Row gutter={[10, 10]}>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\n                </Col>\n            </Row>\n           \n            <Row gutter={[10, 10]}>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' line />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\n                </Col>\n                <Col>\n                    <Skeleton.Input style={{ width: 200 }} active={true} size='default' />\n                </Col>\n            </Row>\n\n        </div>\n    )\n}\nconst ParaSkeleton = () => {\n    return(\n        <div>\n            <Skeleton active />\n        </div>\n    )\n}\nexport {\n    TableSkeleton,\n    ParaSkeleton\n}","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Details/styles/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/RequestForQuotation/style/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Vendor/style/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/FormError/formError.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Textbox/style/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/UserProfile/style/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/config/Route/routes.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/AllVendors/allVendors.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Vendor/schema.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Header/style/index.js",["285"],"import styled from 'styled-components'\nimport media from '../../MediaQuery/media'\n\nexport const Navbar = styled.div`\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\nheight: 50px;\nborder-bottom: 1px solid gray;\nbox-shadow: 5px 2px 15px #888888;\n`\nexport const Logo = styled.img`\nwidth:50px;\nheight: 50px;\nmargin-left: 10px;\n// justify-content: flex-start;\n`\nexport const User = styled.div`\ndisplay: flex;\nalign-items: center;\n`\nexport const UserName = styled.div`\nmargin-right: 10px;\n`\nexport const UserAvatar = styled.div`\nmargin-right: 10px;\n`\nexport const DropdownDiv = styled.div`\ntext-align: center;\njustify-content: center;\nalign-items: center;\nmargin-top: 10px;\nwidth:250px;\noverflow: hidden;\npadding:12px;\n`\nexport const UsersFirstName = styled.h4`\nmargin-top:15px;\nword-spacing:1px;\n`\nexport const UsersEmail = styled.p`\n\n`\nexport const Span = styled.span`\nmargin-right: 10px;\n`\n\n\n","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/FormError/style/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/AllCustomers/style/index.js",[],["286","287"],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/AllVendors/style/index.js",[],["288","289"],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/PurchaseOrder/style/index.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/404/pagenotfound.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/BOM/bom.js",["290","291","292"],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Delivery/delivery.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Production/production.js",["293","294","295"],"import React, { useContext, useEffect } from 'react'\nimport firebase from '../../config/Firebase/firebase'\nimport 'firebase/firestore';\nimport { useHistory } from 'react-router-dom'\nimport { VendorCustomerContext } from '../../context/Random/random'\nimport { UserContext } from '../../context/UserContext/UserContext'\nimport {\n    getCustomerOrder, getDataById, getOrdersById, getAllInventoryItems, CreateRecord, CapitalizeWords,\n    getProductionOrders,\n    UpdateProductionStatus,\n    UpdateItemStatus\n} from '../../Utils/utils'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport {\n    Divider, Input, Button, Tooltip, message, Select, Tabs, Row, Col, Space, Table, Skeleton, Modal, Tag\n} from 'antd'\nimport {\n    Title, H3, ListItem, ItemDiv, QuantityAndButtonDiv, Quantity, ItemsListMainDiv, ItemsListOne, ItemsListTwo\n} from '../../Utils/styles'\nimport { FaRegClipboard, FaDiagnoses } from 'react-icons/fa'\nimport TextArea from 'antd/lib/input/TextArea'\nimport { useState } from 'react/cjs/react.development'\n\nconst Production = () => {\n    const { bomItems } = useContext(VendorCustomerContext)\n    const { user } = useContext(UserContext)\n    const [customerId, setCustomerId] = useState()\n    const [customerName, setCustomerName] = useState()\n    const [orderDate, setOrderDate] = useState()\n    const [orderType, setOrderType] = useState()\n    const [itemQuantity, setItemQuantity] = useState()\n    const [discription, setDiscription] = useState()\n    const [bomName, setBomName] = useState()\n    const [newBomList, setNewBomList] = useState([])\n    const [allInventory, setAllInventory] = useState([])\n    const [customerOrder, setCustomerOrder] = useState()\n    const [allOrders, setAllOrders] = useState()\n    const [orderDetails, setOrderDetails] = useState()\n    const [showModal, setShowModal] = useState(false);\n    const [orderItemslist, setOrderItemslist] = useState()\n\n    useEffect(() => {\n        getCustomerOrder().then(data => {\n            setCustomerOrder(data)\n        })\n        getAllInventoryItems().then(data => {\n            setAllInventory(data)\n        })\n        getProductionOrders().then(data => {\n            setAllOrders(data)\n        })\n    }, [])\n\n    const name = user && user.map(user => user.name)\n    const userName = name && name.toString()\n    const { TabPane } = Tabs\n    const history = useHistory()\n    const current_datetime = new Date()\n    const utc = current_datetime.getDate() + '-' + (current_datetime.getMonth() + 1) + '-' + current_datetime.getFullYear()\n    const shortid = require('shortid')\n    const POiD = shortid.generate()\n    const bomItem = bomItems?.flatMap(n => n.BomName)\n\n    const orderItems = orderDetails?.flatMap(i => i.ItemsList)\n\n    const getOrderData = (id) => {\n        getOrdersById(id).then(data => {\n            setCustomerName(data[0].CustomerName)\n            setOrderDate(data[0].requiredDate)\n            setCustomerId(id)\n        })\n        const orderList = customerOrder?.filter(item => {\n            return id == item.orderID\n        })\n        const orderItem = orderList.flatMap(i => i.itemsList)\n        setOrderItemslist(orderItem)\n    }\n\n    const selectOrderType = (value) => {\n        setOrderType(value)\n    }\n\n    const selectBomItem = (value) => {\n        setBomName(value)\n        const filterItem = bomItems.filter(items => {\n            return items.BomName === value\n        })\n        const bomList = filterItem?.flatMap(list => list.List)\n        const newList = bomList.map(items => {\n            return {\n                ...items,\n                quantity: items.quantity * itemQuantity\n            }\n        })\n        setNewBomList(newList)\n    }\n\n    const createPO = () => {\n        if (!orderType) return message.error('Error! Select order type')\n        if (!itemQuantity) return message.error('Error! Enter item quantity')\n        if (!bomName) return message.error('Error! Select BOM')\n        if (!customerName) return message.error('Error! Select customer order')\n\n        allInventory && allInventory.map(item1 => {\n            newBomList && newBomList.map(item2 => {\n                if (item1.itemsName === item2.items && item1.quantity !== 0) {\n                    if (item1.quantity >= item2.quantity) {\n                        var newObj = { ...item1, quantity: item1.quantity - item2.quantity };\n                        firebase\n                            .firestore()\n                            .collection('Item_Master').doc(item1.iD).update(newObj)\n                    }\n\n                }\n            })\n        })\n        const PO_Object = {\n            POiD,\n            UserName: CapitalizeWords(userName),\n            CustomerId: customerId,\n            CustomerName: CapitalizeWords(customerName),\n            DueDate: orderDate,\n            OrderStatus: 'On-Hold',\n            ItemStatus: 'Not Set',\n            CreationDate: utc,\n            Type: orderType,\n            BomItems: bomName,\n            Quantity: Number(itemQuantity),\n            ItemsList: newBomList,\n            Discription: CapitalizeWords(discription)\n        }\n        CreateRecord(PO_Object, 'Production_Orders', 'Production Order created, Inventory Updated')\n        setItemQuantity('')\n        setNewBomList([])\n        setDiscription('')\n    }\n\n    const changeStatus = (e, id) => {\n        UpdateProductionStatus(e, id)\n    }\n\n    const changeItemStatus = (e, id) => {\n        UpdateItemStatus(e, id)\n    }\n\n    const ShowOrderDetails = (id) => {\n        setShowModal(true)\n        getDataById('Production_Orders', id).then(data => {\n            setOrderDetails(data)\n        })\n    }\n    const allOrderTable = [\n        {\n            title: 'Order ID',\n            dataIndex: 'POiD',\n            key: 'production_id',\n        },\n        {\n            title: 'Customer Name',\n            dataIndex: 'CustomerName',\n            key: 'customer_Name',\n        },\n        {\n            title: 'Item',\n            dataIndex: 'BomItems',\n            key: 'item_Name',\n        },\n        {\n            title: 'Due Date',\n            dataIndex: 'DueDate',\n            key: 'due_Date',\n        },\n        {\n            title: 'OrderStatus',\n            key: 'status',\n            render: (allPO) => (\n                <Space size=\"middle\">\n                    <Select\n                        defaultValue={allPO.OrderStatus}\n                        placeholder='Select Status'\n                        style={{ width: 150 }}\n                        onChange={e => changeStatus(e, allPO.iD)}\n                    >\n                        <Select.Option value=\"In-progress\">In-progress</Select.Option>\n                        <Select.Option value=\"On-Hold\">On-Hold</Select.Option>\n                    </Select>\n                </Space>\n            ),\n        },\n        {\n            title: 'ItemStatus',\n            key: 'itemstatus',\n            render: (allPO) => (\n                <Space size=\"middle\">\n                    <Select\n                        defaultValue={allPO.ItemStatus}\n                        // disabled={allPO.ItemStatus == 'In-progress'? false : true}\n                        placeholder='Item Status'\n                        style={{ width: 150 }}\n                        onChange={e => changeItemStatus(e, allPO.iD)}\n                    >\n                        <Select.Option value=\"Cutting\">Cutting</Select.Option>\n                        <Select.Option value=\"Fixing\">Fixing</Select.Option>\n                        <Select.Option value=\"Polishing\">Polishing</Select.Option>\n                        <Select.Option value=\"Polishing\">Complete</Select.Option>\n                    </Select>\n                </Space>\n            ),\n        },\n        {\n            title: 'Action',\n            key: 'action',\n            render: (good) => (\n                <Space size=\"middle\">\n                    <Button\n                        onClick={\n                            e => ShowOrderDetails(good.iD)\n                        }\n                    >Details</Button>\n                </Space>\n            ),\n        },\n    ]\n    const tableOrderDetails = [\n        {\n            title: 'Item Name',\n            dataIndex: 'items',\n            key: 'item_Name',\n        },\n        {\n            title: 'Quantity',\n            dataIndex: 'quantity',\n            key: 'quantity',\n        },\n        {\n            title: 'UMO',\n            dataIndex: 'unitOfMeassure',\n            key: 'umo',\n        }\n    ]\n    return (\n        <div>\n            <Title>Production</Title>\n            <Row gutter={[10, 10]}>\n                <Col xs={24} sm={14}>\n                    <h4>Date: {utc}</h4>\n                </Col>\n\n                <Col>\n                    <label>Create BOM </label>\n                    <Button type='primary' icon={<FaDiagnoses />} onClick={() => history.push('/home/bill-of-material')} />\n                </Col>\n            </Row>\n            <Tabs defaultActiveKey='1'>\n                <TabPane tab='Production Order' key='1'>\n                    <Row gutter={[10, 10]}>\n                        <Col>\n                            <div style={{ marginBottom: 16 }}>\n                                <label>Production Id:</label>\n\n                                <Input\n                                    addonAfter={\n                                        <Tooltip placement='topRight' title='Click to Copy'>\n                                            <CopyToClipboard text={POiD}>\n                                                <FaRegClipboard\n                                                    style={{ cursor: 'pointer' }}\n                                                />\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    }\n                                    value={POiD}\n                                    disabled\n                                />\n                            </div>\n                        </Col>\n\n                        <Col>\n                            <label>UserName:</label>\n                            <Input type='text' value={userName} disabled />\n                        </Col>\n                    </Row>\n\n                    <Row gutter={[10, 10]}>\n                        <Col>\n                            <Select\n                                style={{ width: 200 }}\n                                placeholder='Cutomer order Id'\n                                onChange={getOrderData}\n                            >\n                                {customerOrder && customerOrder.map(item => <Select.Option\n                                    value={item.orderID}\n                                >\n                                    {item.orderID}\n                                </Select.Option>\n                                )}\n                            </Select>\n                        </Col>\n\n                        <Col>\n                            <Input type='text' value={customerName} placeholder='Customer Name' disabled />\n                        </Col>\n\n                        <Col>\n                            <Input type='text' value={orderDate} placeholder='Due Date' disabled />\n                        </Col>\n                        <Col>\n                            <Select placeholder='Select type' style={{ width: 200 }} onChange={selectOrderType}>\n                                <Select.Option value='Standard'>Standard</Select.Option>\n                            </Select>\n                        </Col>\n                        <Col>\n                            <Select placeholder='BOM Items' style={{ width: 200 }} onChange={selectBomItem}>\n                                {bomItem && bomItem.map(itemname => <Select.Option\n                                    value={itemname} disabled={!itemQuantity}>{itemname}</Select.Option>\n                                )}\n\n                            </Select>\n                        </Col>\n                        <Col>\n                            <Input type='text' value={itemQuantity} placeholder='Planned Quantity' onChange={e => setItemQuantity(e.target.value)} />\n                        </Col>\n\n                    </Row>\n\n                    <Row gutter={[10, 10]}>\n                        <Col xs={24} sm={13}>\n                            <TextArea\n                                rows={2} col={5}\n                                value={discription}\n                                placeholder='Discription Optional'\n                                showCount\n                                maxLength={150}\n                                size='small'\n                                onChange={e => setDiscription(e.target.value)} />\n                        </Col>\n\n                    </Row>\n                    <Divider>\n                        <H3>Production - Items</H3>\n                    </Divider>\n                    <ItemsListMainDiv>\n                        <ItemsListOne>\n                            <H3>Cutomer Order</H3>\n                            <ul>\n                                {\n                                    orderItemslist?.map((items, key) => {\n                                        return (\n                                            <>\n                                                <ListItem key={key} xs={24} sm={12}>\n                                                    <ItemDiv>\n                                                        {items.item}\n                                                    </ItemDiv>\n                                                    <QuantityAndButtonDiv>\n                                                        <Quantity>\n                                                            {items.quantity}\n                                                        </Quantity>\n                                                    </QuantityAndButtonDiv>\n\n                                                </ListItem>\n                                            </>\n                                        )\n                                    })\n                                }\n                            </ul>\n                        </ItemsListOne>\n                        <ItemsListTwo>\n                            <H3>BOM Items</H3>\n                            <ul>\n                                {\n                                    newBomList?.map((item, key) => {\n                                        return (\n                                            <>\n                                                <ListItem key={key} xs={24} sm={12}>\n                                                    <ItemDiv>\n                                                        {item.items}\n                                                    </ItemDiv>\n                                                    <QuantityAndButtonDiv>\n                                                        <Quantity>\n                                                            {item.quantity}-{item.unitOfMeassure}\n                                                        </Quantity>\n                                                    </QuantityAndButtonDiv>\n\n                                                </ListItem>\n                                            </>\n                                        )\n                                    })\n                                }\n                            </ul>\n                        </ItemsListTwo>\n                    </ItemsListMainDiv>\n                    <Button onClick={createPO}>Create Production Order</Button>\n\n                </TabPane>\n                <TabPane tab='All Order' key='2'>\n                    <div>\n                        {allOrders ?\n                            <Table dataSource={allOrders} columns={allOrderTable} /> : <Skeleton />\n                        }\n                    </div>\n                    <Modal\n                        title=\"Production Order Details\"\n                        centered\n                        visible={showModal}\n                        width={1000}\n                        footer={\n                            <div\n                                style={{\n                                    textAlign: 'right'\n                                }}\n                            >\n                                <Button onClick={() => setShowModal(false)} style={{ marginRight: 8 }}>\n                                    Close\n                              </Button>\n                            </div>\n                        }\n                    >\n                        {orderDetails ?\n                            orderDetails.map((item, key) => {\n                                return (\n                                    <div>\n                                        <p>{`Item: ${item.BomItems}`}</p>\n                                        <p>{`Customer Name: ${item.CustomerName}`}</p>\n                                        <p>Order Status:\n                                           <Tag color={item.OrderStatus === 'In-progress' ? 'blue' : 'default'}>\n                                                {item.OrderStatus}</Tag>\n                                        </p>\n                                        <p>{`Discription: ${item.Discription}`}</p>\n                                    </div>\n                                )\n                            }) : <Skeleton active />\n                        }\n                        <div>\n                            {orderDetails ?\n                                <Table dataSource={orderItems} columns={tableOrderDetails} /> : <Skeleton />\n                            }\n                        </div>\n                    </Modal>\n                </TabPane>\n            </Tabs>\n        </div>\n    )\n}\n\nexport default Production\n","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/PurchaseRequisition/purchaseRequisition.js",["296"],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/Utils/styles.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/Delivery/validationSchema.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/CustomerInvoice/customerInvoice.js",["297","298"],"import React, { useState, useEffect } from 'react'\nimport { getCustomerOrder, getOrdersById, CreateRecord,UpdateStatus } from '../../Utils/utils'\nimport { Row, Col, List, Button, Tag, Select, Divider, message } from 'antd';\nimport { H3, Title, Paragraph, } from '../../Utils/styles'\nimport { Details } from './style'\n\nconst CustomerInvoice = () => {\n    const [customerOrders, setCustomerOrders] = useState()\n    const [orderDetails, setOrderDetails] = useState()\n    const [orderItems, setOrderItems] = useState()\n\n    useEffect(() => {\n        getCustomerOrder().then(data => {\n            setCustomerOrders(data)\n        })\n    }, [])\n\n    const shortid = require('shortid')\n    const invoiceId = shortid.generate()\n    let current_datetime = new Date()\n    let currentDate = current_datetime.getDate() + \"-\" + (current_datetime.getMonth() + 1) + \"-\" + current_datetime.getFullYear()\n\n    const getOrderDetails = (id) => {\n        getOrdersById(id).then(data => {\n            setOrderDetails(data)\n            setOrderItems(data?.flatMap(items => items.itemsList))\n        })\n    }\n\n    const invoiceTotal = orderItems && orderItems.reduce((acc, current) => {\n        return acc + parseInt(current.itemPrice)\n    }, 0);\n\n    const createInvoice = () => {\n        if (!orderDetails || !orderItems) return message.error('Error! Select customer id to retreive data')\n        if (orderDetails && orderDetails[0].Status == 'Finished') return message.error('Invoice Aleardy Created')\n        const InvoiceObject = {\n            InvoiceId: invoiceId,\n            CustomerName: orderDetails && orderDetails[0].CustomerName,\n            CompanyName: orderDetails && orderDetails[0].CompanyName,\n            Phone: orderDetails && orderDetails[0].Phone,\n            Address: orderDetails && orderDetails[0].BillToAddress,\n            City: orderDetails && orderDetails[0].City,\n            State: orderDetails && orderDetails[0].State,\n            PostalCode: orderDetails && orderDetails[0].PostalCode,\n            InvoiceCreateDate: currentDate,\n            CustomerOrderId: orderDetails && orderDetails[0].orderID,\n            OrderCreated: orderDetails && orderDetails[0].currentDate,\n            OrderRequiredDate: orderDetails && orderDetails[0].requiredDate,\n            UserName: orderDetails && orderDetails[0].UserName,\n            UserEmail: orderDetails && orderDetails[0].UserEmail,\n            OrderItems: orderItems,\n            TotalAmount: invoiceTotal\n        }\n        CreateRecord(InvoiceObject, 'Invoices', 'Your Invoice has been created')\n        UpdateStatus('Customer_Order', 'Finished', orderDetails?.[0].iD)\n        setOrderDetails('')\n        setOrderItems('')\n    }\n    return (\n        <div>\n            <Title>Customer Invoice</Title>\n            <Row gutter={[10, 10]}>\n                <Col><Paragraph>Date:</Paragraph></Col>\n                <Col>{currentDate}</Col>\n            </Row>\n            <Row gutter={[10, 10]}>\n                <Col><Paragraph>Invoice Number:</Paragraph></Col>\n                <Col>{invoiceId}</Col>\n            </Row>\n            <Row gutter={[10, 10]}>\n                <Col xs={24} sm={6}>\n                    <Select\n                        placeholder='Select Order Id'\n                        style={{ width: 200 }}\n                        onChange={orderId => getOrderDetails(orderId)}\n                    >\n                        {customerOrders && customerOrders.map(item => <Select.Option\n                            value={item.orderID}\n                        >\n                            {item.orderID}\n                        </Select.Option>\n                        )}\n                    </Select>\n                </Col>\n            </Row>\n            <Details>\n                <div>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>Customer Name: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].CustomerName}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>CompanyName Name: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].CompanyName}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>Phone: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].Phone}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>Address: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].BillToAddress}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>City: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].City}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>State: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].State}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>Postal Code: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].PostalCode}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>Order Is: </Paragraph></Col>\n                        <Col>\n                            <Tag color={orderDetails&& orderDetails[0].Status == 'In-Progress' ? 'orange' : 'green'}>\n                                {orderDetails&& orderDetails[0].Status}\n                            </Tag>\n                        </Col>\n                    </Row>\n                </div>\n                <div>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>Order Id: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].orderID}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>Order Creation: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].currentDate}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>Order Required: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].requiredDate}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>User Name: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].UserName}</Col>\n                    </Row>\n                    <Row gutter={[10, 10]}>\n                        <Col><Paragraph>User Email: </Paragraph></Col>\n                        <Col>{orderDetails && orderDetails[0].UserEmail}</Col>\n                    </Row>\n                </div>\n            </Details>\n            <Divider><H3>Item List</H3></Divider>\n            <List\n                size='small'\n                itemLayout=\"horizontal\"\n                bordered\n                header={<H3>Order Items</H3>}\n                dataSource={orderItems}\n                style={{ marginTop: '15px', transistion: '1s' }}\n                renderItem={items => (\n                    <List.Item>\n                        <List.Item>\n                            <Paragraph>Item Name: <Tag color='geekblue' style={{ marginLeft: '5px', marginRight: '5px' }}>{items.item}</Tag> </Paragraph>\n                            <Paragraph>Item Quantity: <Tag color='green' style={{ marginLeft: '5px', marginRight: '5px' }}>{items.quantity}</Tag> </Paragraph>\n                            <Paragraph>Item TotalPrice: <Tag color='blue' style={{ marginLeft: '5px', marginRight: '5px' }}>{items.itemPrice}</Tag></Paragraph>\n\n                        </List.Item>\n                    </List.Item>\n                )}\n            />\n            <Row gutter={[10, 10]}>\n                <Col>Total Amount:</Col>\n                <Col><Paragraph><Tag color='#87d068'>{invoiceTotal} Rs.</Tag></Paragraph></Col>\n            </Row>\n\n            <Row>\n                <Button onClick={createInvoice}>Create Invoice</Button>\n            </Row>\n        </div>\n    )\n}\nexport default CustomerInvoice","/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/CustomerInvoice/style.js",[],"/home/salman/Salman/My Data/university/FYP 2/sales-app/src/components/PurchaseRequisition/style.js",[],{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","severity":1,"message":"304","line":49,"column":6,"nodeType":"305","endLine":49,"endColumn":8,"suggestions":"306"},{"ruleId":"307","severity":1,"message":"308","line":1,"column":27,"nodeType":"309","messageId":"310","endLine":1,"endColumn":37},{"ruleId":"307","severity":1,"message":"311","line":25,"column":12,"nodeType":"309","messageId":"310","endLine":25,"endColumn":24},{"ruleId":"307","severity":1,"message":"312","line":25,"column":26,"nodeType":"309","messageId":"310","endLine":25,"endColumn":41},{"ruleId":"313","severity":1,"message":"314","line":6,"column":13,"nodeType":"315","messageId":"316","endLine":6,"endColumn":15},{"ruleId":"313","severity":1,"message":"314","line":6,"column":31,"nodeType":"315","messageId":"316","endLine":6,"endColumn":33},{"ruleId":"313","severity":1,"message":"314","line":6,"column":45,"nodeType":"315","messageId":"316","endLine":6,"endColumn":47},{"ruleId":"307","severity":1,"message":"317","line":15,"column":5,"nodeType":"309","messageId":"310","endLine":15,"endColumn":9},{"ruleId":"307","severity":1,"message":"318","line":23,"column":12,"nodeType":"309","messageId":"310","endLine":23,"endColumn":25},{"ruleId":"303","severity":1,"message":"319","line":77,"column":8,"nodeType":"305","endLine":77,"endColumn":10,"suggestions":"320"},{"ruleId":"321","severity":1,"message":"322","line":83,"column":35,"nodeType":"323","messageId":"324","endLine":83,"endColumn":37},{"ruleId":"325","severity":1,"message":"326","line":106,"column":17,"nodeType":"327","endLine":106,"endColumn":42},{"ruleId":"325","severity":1,"message":"326","line":112,"column":17,"nodeType":"327","endLine":112,"endColumn":20},{"ruleId":"325","severity":1,"message":"326","line":117,"column":17,"nodeType":"327","endLine":117,"endColumn":39},{"ruleId":"325","severity":1,"message":"326","line":134,"column":29,"nodeType":"327","endLine":134,"endColumn":98},{"ruleId":"307","severity":1,"message":"308","line":1,"column":15,"nodeType":"309","messageId":"310","endLine":1,"endColumn":25},{"ruleId":"328","severity":1,"message":"329","line":30,"column":13,"nodeType":"330","messageId":"316","endLine":30,"endColumn":18},{"ruleId":"303","severity":1,"message":"331","line":41,"column":8,"nodeType":"305","endLine":41,"endColumn":10,"suggestions":"332"},{"ruleId":"307","severity":1,"message":"333","line":1,"column":15,"nodeType":"309","messageId":"310","endLine":1,"endColumn":23},{"ruleId":"307","severity":1,"message":"334","line":1,"column":25,"nodeType":"309","messageId":"310","endLine":1,"endColumn":34},{"ruleId":"313","severity":1,"message":"314","line":89,"column":26,"nodeType":"315","messageId":"316","endLine":89,"endColumn":28},{"ruleId":"313","severity":1,"message":"314","line":124,"column":46,"nodeType":"315","messageId":"316","endLine":124,"endColumn":48},{"ruleId":"335","severity":1,"message":"336","line":97,"column":19,"nodeType":"305","messageId":"337","endLine":155,"endColumn":4},{"ruleId":"313","severity":1,"message":"314","line":248,"column":52,"nodeType":"315","messageId":"316","endLine":248,"endColumn":54},{"ruleId":"307","severity":1,"message":"338","line":49,"column":12,"nodeType":"309","messageId":"310","endLine":49,"endColumn":24},{"ruleId":"303","severity":1,"message":"331","line":69,"column":8,"nodeType":"305","endLine":69,"endColumn":10,"suggestions":"339"},{"ruleId":"303","severity":1,"message":"340","line":73,"column":8,"nodeType":"305","endLine":73,"endColumn":19,"suggestions":"341"},{"ruleId":"307","severity":1,"message":"342","line":24,"column":12,"nodeType":"309","messageId":"310","endLine":24,"endColumn":24},{"ruleId":"321","severity":1,"message":"322","line":74,"column":52,"nodeType":"323","messageId":"324","endLine":74,"endColumn":54},{"ruleId":"303","severity":1,"message":"343","line":80,"column":8,"nodeType":"305","endLine":80,"endColumn":10,"suggestions":"344"},{"ruleId":"303","severity":1,"message":"331","line":39,"column":8,"nodeType":"305","endLine":39,"endColumn":10,"suggestions":"345"},{"ruleId":"346","severity":1,"message":"347","line":150,"column":32,"nodeType":"348","messageId":"349","endLine":150,"endColumn":33},{"ruleId":"303","severity":1,"message":"350","line":201,"column":8,"nodeType":"305","endLine":201,"endColumn":16,"suggestions":"351"},{"ruleId":"307","severity":1,"message":"352","line":7,"column":61,"nodeType":"309","messageId":"310","endLine":7,"endColumn":65},{"ruleId":"303","severity":1,"message":"353","line":40,"column":8,"nodeType":"305","endLine":40,"endColumn":10,"suggestions":"354"},{"ruleId":"307","severity":1,"message":"355","line":3,"column":21,"nodeType":"309","messageId":"310","endLine":3,"endColumn":26},{"ruleId":"307","severity":1,"message":"356","line":2,"column":8,"nodeType":"309","messageId":"310","endLine":2,"endColumn":13},{"ruleId":"299","replacedBy":"357"},{"ruleId":"301","replacedBy":"358"},{"ruleId":"299","replacedBy":"359"},{"ruleId":"301","replacedBy":"360"},{"ruleId":"307","severity":1,"message":"361","line":26,"column":10,"nodeType":"309","messageId":"310","endLine":26,"endColumn":22},{"ruleId":"307","severity":1,"message":"362","line":26,"column":24,"nodeType":"309","messageId":"310","endLine":26,"endColumn":39},{"ruleId":"313","severity":1,"message":"314","line":58,"column":32,"nodeType":"315","messageId":"316","endLine":58,"endColumn":34},{"ruleId":"313","severity":1,"message":"314","line":73,"column":23,"nodeType":"315","messageId":"316","endLine":73,"endColumn":25},{"ruleId":"321","severity":1,"message":"322","line":104,"column":48,"nodeType":"323","messageId":"324","endLine":104,"endColumn":50},{"ruleId":"321","severity":1,"message":"322","line":105,"column":48,"nodeType":"323","messageId":"324","endLine":105,"endColumn":50},{"ruleId":"335","severity":1,"message":"336","line":136,"column":22,"nodeType":"305","messageId":"337","endLine":194,"endColumn":6},{"ruleId":"313","severity":1,"message":"314","line":36,"column":52,"nodeType":"315","messageId":"316","endLine":36,"endColumn":54},{"ruleId":"313","severity":1,"message":"314","line":120,"column":79,"nodeType":"315","messageId":"316","endLine":120,"endColumn":81},"no-native-reassign",["363"],"no-negated-in-lhs",["364"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setAllInventoryItems', 'setBomItems', 'setCustomers', and 'setVendors'. Either include them or remove the dependency array.","ArrayExpression",["365"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'errorMessage' is assigned a value but never used.","'setErrorMessage' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Span' is defined but never used.","'userFirstName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getUserData'. Either include it or remove the dependency array.",["366"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-dupe-keys","Duplicate key 'state'.","ObjectExpression","React Hook useEffect has missing dependencies: 'Cname' and 'slug'. Either include them or remove the dependency array.",["367"],"'useState' is defined but never used.","'useEffect' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'orderDetails' is assigned a value but never used.",["368"],"React Hook useEffect has a missing dependency: 'DisableButton'. Either include it or remove the dependency array.",["369"],"'allItemsName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'itemDetails'. Either include it or remove the dependency array.",["370"],["371"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has a missing dependency: 'totalInvoice'. Either include it or remove the dependency array.",["372"],"'Tabs' is defined but never used.","React Hook useEffect has a missing dependency: 'slug'. Either include it or remove the dependency array.",["373"],"'Space' is defined but never used.","'media' is defined but never used.",["363"],["364"],["363"],["364"],"'availableBom' is assigned a value but never used.","'setAvailableBom' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"378","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"378","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},"Update the dependencies array to be: [setAllInventoryItems, setBomItems, setCustomers, setVendors]",{"range":"390","text":"391"},"Update the dependencies array to be: [getUserData]",{"range":"392","text":"393"},"Update the dependencies array to be: [Cname, slug]",{"range":"394","text":"395"},{"range":"396","text":"395"},"Update the dependencies array to be: [DisableButton, itemsList]",{"range":"397","text":"398"},"Update the dependencies array to be: [itemDetails]",{"range":"399","text":"400"},{"range":"401","text":"395"},"Update the dependencies array to be: [gRData, totalInvoice]",{"range":"402","text":"403"},"Update the dependencies array to be: [slug]",{"range":"404","text":"405"},[1189,1191],"[setAllInventoryItems, setBomItems, setCustomers, setVendors]",[2372,2374],"[getUserData]",[1130,1132],"[Cname, slug]",[2110,2112],[2168,2179],"[DisableButton, itemsList]",[2479,2481],"[itemDetails]",[1055,1057],[7439,7447],"[gRData, totalInvoice]",[1599,1601],"[slug]"]